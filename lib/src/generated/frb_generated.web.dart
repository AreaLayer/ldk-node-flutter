// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/error.dart';
import 'api/node.dart';
import 'api/types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class LdkCoreApiImplPlatform extends BaseApiImpl<LdkCoreWire> {
  LdkCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NodeSqliteStorePtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_NodeSqliteStore;

  @protected
  NodeSqliteStore dco_decode_RustOpaque_NodeSqliteStore(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  Address dco_decode_address(dynamic raw);

  @protected
  Bolt11Invoice dco_decode_bolt_11_invoice(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Address dco_decode_box_autoadd_address(dynamic raw);

  @protected
  Bolt11Invoice dco_decode_box_autoadd_bolt_11_invoice(dynamic raw);

  @protected
  ChainDataSourceConfig dco_decode_box_autoadd_chain_data_source_config(
      dynamic raw);

  @protected
  ChannelConfig dco_decode_box_autoadd_channel_config(dynamic raw);

  @protected
  ChannelId dco_decode_box_autoadd_channel_id(dynamic raw);

  @protected
  Config dco_decode_box_autoadd_config(dynamic raw);

  @protected
  EntropySourceConfig dco_decode_box_autoadd_entropy_source_config(dynamic raw);

  @protected
  Event dco_decode_box_autoadd_event(dynamic raw);

  @protected
  GossipSourceConfig dco_decode_box_autoadd_gossip_source_config(dynamic raw);

  @protected
  LdkMnemonic dco_decode_box_autoadd_ldk_mnemonic(dynamic raw);

  @protected
  LdkNode dco_decode_box_autoadd_ldk_node(dynamic raw);

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw);

  @protected
  PaymentDetails dco_decode_box_autoadd_payment_details(dynamic raw);

  @protected
  PaymentHash dco_decode_box_autoadd_payment_hash(dynamic raw);

  @protected
  PaymentPreimage dco_decode_box_autoadd_payment_preimage(dynamic raw);

  @protected
  PaymentSecret dco_decode_box_autoadd_payment_secret(dynamic raw);

  @protected
  PublicKey dco_decode_box_autoadd_public_key(dynamic raw);

  @protected
  SocketAddress dco_decode_box_autoadd_socket_address(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  UserChannelId dco_decode_box_autoadd_user_channel_id(dynamic raw);

  @protected
  BuilderException dco_decode_builder_exception(dynamic raw);

  @protected
  ChainDataSourceConfig dco_decode_chain_data_source_config(dynamic raw);

  @protected
  ChannelConfig dco_decode_channel_config(dynamic raw);

  @protected
  ChannelDetails dco_decode_channel_details(dynamic raw);

  @protected
  ChannelId dco_decode_channel_id(dynamic raw);

  @protected
  Config dco_decode_config(dynamic raw);

  @protected
  EntropySourceConfig dco_decode_entropy_source_config(dynamic raw);

  @protected
  Event dco_decode_event(dynamic raw);

  @protected
  GossipSourceConfig dco_decode_gossip_source_config(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  LdkMnemonic dco_decode_ldk_mnemonic(dynamic raw);

  @protected
  LdkNode dco_decode_ldk_node(dynamic raw);

  @protected
  List<ChannelDetails> dco_decode_list_channel_details(dynamic raw);

  @protected
  List<PaymentDetails> dco_decode_list_payment_details(dynamic raw);

  @protected
  List<PeerDetails> dco_decode_list_peer_details(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<PublicKey> dco_decode_list_public_key(dynamic raw);

  @protected
  List<SocketAddress> dco_decode_list_socket_address(dynamic raw);

  @protected
  LogLevel dco_decode_log_level(dynamic raw);

  @protected
  MaxDustHTLCExposure dco_decode_max_dust_htlc_exposure(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  NodeException dco_decode_node_exception(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  ChainDataSourceConfig? dco_decode_opt_box_autoadd_chain_data_source_config(
      dynamic raw);

  @protected
  ChannelConfig? dco_decode_opt_box_autoadd_channel_config(dynamic raw);

  @protected
  EntropySourceConfig? dco_decode_opt_box_autoadd_entropy_source_config(
      dynamic raw);

  @protected
  Event? dco_decode_opt_box_autoadd_event(dynamic raw);

  @protected
  GossipSourceConfig? dco_decode_opt_box_autoadd_gossip_source_config(
      dynamic raw);

  @protected
  PaymentDetails? dco_decode_opt_box_autoadd_payment_details(dynamic raw);

  @protected
  PaymentPreimage? dco_decode_opt_box_autoadd_payment_preimage(dynamic raw);

  @protected
  PaymentSecret? dco_decode_opt_box_autoadd_payment_secret(dynamic raw);

  @protected
  PublicKey? dco_decode_opt_box_autoadd_public_key(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  List<SocketAddress>? dco_decode_opt_list_socket_address(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  PaymentDetails dco_decode_payment_details(dynamic raw);

  @protected
  PaymentDirection dco_decode_payment_direction(dynamic raw);

  @protected
  PaymentHash dco_decode_payment_hash(dynamic raw);

  @protected
  PaymentPreimage dco_decode_payment_preimage(dynamic raw);

  @protected
  PaymentSecret dco_decode_payment_secret(dynamic raw);

  @protected
  PaymentStatus dco_decode_payment_status(dynamic raw);

  @protected
  PeerDetails dco_decode_peer_details(dynamic raw);

  @protected
  PublicKey dco_decode_public_key(dynamic raw);

  @protected
  SocketAddress dco_decode_socket_address(dynamic raw);

  @protected
  Txid dco_decode_txid(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array12 dco_decode_u_8_array_12(dynamic raw);

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw);

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  U8Array64 dco_decode_u_8_array_64(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  UserChannelId dco_decode_user_channel_id(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  NodeSqliteStore sse_decode_RustOpaque_NodeSqliteStore(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  Address sse_decode_address(SseDeserializer deserializer);

  @protected
  Bolt11Invoice sse_decode_bolt_11_invoice(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Address sse_decode_box_autoadd_address(SseDeserializer deserializer);

  @protected
  Bolt11Invoice sse_decode_box_autoadd_bolt_11_invoice(
      SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig sse_decode_box_autoadd_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig sse_decode_box_autoadd_channel_config(
      SseDeserializer deserializer);

  @protected
  ChannelId sse_decode_box_autoadd_channel_id(SseDeserializer deserializer);

  @protected
  Config sse_decode_box_autoadd_config(SseDeserializer deserializer);

  @protected
  EntropySourceConfig sse_decode_box_autoadd_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  Event sse_decode_box_autoadd_event(SseDeserializer deserializer);

  @protected
  GossipSourceConfig sse_decode_box_autoadd_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  LdkMnemonic sse_decode_box_autoadd_ldk_mnemonic(SseDeserializer deserializer);

  @protected
  LdkNode sse_decode_box_autoadd_ldk_node(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails sse_decode_box_autoadd_payment_details(
      SseDeserializer deserializer);

  @protected
  PaymentHash sse_decode_box_autoadd_payment_hash(SseDeserializer deserializer);

  @protected
  PaymentPreimage sse_decode_box_autoadd_payment_preimage(
      SseDeserializer deserializer);

  @protected
  PaymentSecret sse_decode_box_autoadd_payment_secret(
      SseDeserializer deserializer);

  @protected
  PublicKey sse_decode_box_autoadd_public_key(SseDeserializer deserializer);

  @protected
  SocketAddress sse_decode_box_autoadd_socket_address(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  UserChannelId sse_decode_box_autoadd_user_channel_id(
      SseDeserializer deserializer);

  @protected
  BuilderException sse_decode_builder_exception(SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig sse_decode_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig sse_decode_channel_config(SseDeserializer deserializer);

  @protected
  ChannelDetails sse_decode_channel_details(SseDeserializer deserializer);

  @protected
  ChannelId sse_decode_channel_id(SseDeserializer deserializer);

  @protected
  Config sse_decode_config(SseDeserializer deserializer);

  @protected
  EntropySourceConfig sse_decode_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  Event sse_decode_event(SseDeserializer deserializer);

  @protected
  GossipSourceConfig sse_decode_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  LdkMnemonic sse_decode_ldk_mnemonic(SseDeserializer deserializer);

  @protected
  LdkNode sse_decode_ldk_node(SseDeserializer deserializer);

  @protected
  List<ChannelDetails> sse_decode_list_channel_details(
      SseDeserializer deserializer);

  @protected
  List<PaymentDetails> sse_decode_list_payment_details(
      SseDeserializer deserializer);

  @protected
  List<PeerDetails> sse_decode_list_peer_details(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<PublicKey> sse_decode_list_public_key(SseDeserializer deserializer);

  @protected
  List<SocketAddress> sse_decode_list_socket_address(
      SseDeserializer deserializer);

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer);

  @protected
  MaxDustHTLCExposure sse_decode_max_dust_htlc_exposure(
      SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  NodeException sse_decode_node_exception(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  ChainDataSourceConfig? sse_decode_opt_box_autoadd_chain_data_source_config(
      SseDeserializer deserializer);

  @protected
  ChannelConfig? sse_decode_opt_box_autoadd_channel_config(
      SseDeserializer deserializer);

  @protected
  EntropySourceConfig? sse_decode_opt_box_autoadd_entropy_source_config(
      SseDeserializer deserializer);

  @protected
  Event? sse_decode_opt_box_autoadd_event(SseDeserializer deserializer);

  @protected
  GossipSourceConfig? sse_decode_opt_box_autoadd_gossip_source_config(
      SseDeserializer deserializer);

  @protected
  PaymentDetails? sse_decode_opt_box_autoadd_payment_details(
      SseDeserializer deserializer);

  @protected
  PaymentPreimage? sse_decode_opt_box_autoadd_payment_preimage(
      SseDeserializer deserializer);

  @protected
  PaymentSecret? sse_decode_opt_box_autoadd_payment_secret(
      SseDeserializer deserializer);

  @protected
  PublicKey? sse_decode_opt_box_autoadd_public_key(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  List<SocketAddress>? sse_decode_opt_list_socket_address(
      SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  PaymentDetails sse_decode_payment_details(SseDeserializer deserializer);

  @protected
  PaymentDirection sse_decode_payment_direction(SseDeserializer deserializer);

  @protected
  PaymentHash sse_decode_payment_hash(SseDeserializer deserializer);

  @protected
  PaymentPreimage sse_decode_payment_preimage(SseDeserializer deserializer);

  @protected
  PaymentSecret sse_decode_payment_secret(SseDeserializer deserializer);

  @protected
  PaymentStatus sse_decode_payment_status(SseDeserializer deserializer);

  @protected
  PeerDetails sse_decode_peer_details(SseDeserializer deserializer);

  @protected
  PublicKey sse_decode_public_key(SseDeserializer deserializer);

  @protected
  SocketAddress sse_decode_socket_address(SseDeserializer deserializer);

  @protected
  Txid sse_decode_txid(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array12 sse_decode_u_8_array_12(SseDeserializer deserializer);

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer);

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  U8Array64 sse_decode_u_8_array_64(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  UserChannelId sse_decode_user_channel_id(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  List<dynamic> cst_encode_address(Address raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.s)];
  }

  @protected
  List<dynamic> cst_encode_bolt_11_invoice(Bolt11Invoice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.signedRawInvoice)];
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_address(Address raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_address(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bolt_11_invoice(Bolt11Invoice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bolt_11_invoice(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_chain_data_source_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_channel_config(ChannelConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_channel_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_channel_id(ChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_channel_id(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_config(Config raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_entropy_source_config(
      EntropySourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_entropy_source_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_event(Event raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_event(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_gossip_source_config(
      GossipSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_gossip_source_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_ldk_mnemonic(LdkMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_ldk_mnemonic(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_ldk_node(LdkNode raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_ldk_node(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_out_point(OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_out_point(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_payment_details(PaymentDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_payment_details(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_payment_hash(PaymentHash raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_payment_hash(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_payment_preimage(PaymentPreimage raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_payment_preimage(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_payment_secret(PaymentSecret raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_payment_secret(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_public_key(PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_public_key(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_socket_address(SocketAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_socket_address(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_u_32(raw);
  }

  @protected
  Object cst_encode_box_autoadd_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_u_64(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_user_channel_id(UserChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_user_channel_id(raw);
  }

  @protected
  List<dynamic> cst_encode_chain_data_source_config(ChainDataSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is ChainDataSourceConfig_Esplora) {
      return [0, cst_encode_String(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_channel_config(ChannelConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_u_32(raw.forwardingFeeProportionalMillionths),
      cst_encode_u_32(raw.forwardingFeeBaseMsat),
      cst_encode_u_16(raw.cltvExpiryDelta),
      cst_encode_max_dust_htlc_exposure(raw.maxDustHtlcExposure),
      cst_encode_u_64(raw.forceCloseAvoidanceMaxFeeSatoshis),
      cst_encode_bool(raw.acceptUnderpayingHtlcs)
    ];
  }

  @protected
  List<dynamic> cst_encode_channel_details(ChannelDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_channel_id(raw.channelId),
      cst_encode_public_key(raw.counterpartyNodeId),
      cst_encode_opt_String(raw.fundingTxo),
      cst_encode_u_64(raw.channelValueSats),
      cst_encode_opt_box_autoadd_u_64(raw.unspendablePunishmentReserve),
      cst_encode_user_channel_id(raw.userChannelId),
      cst_encode_u_32(raw.feerateSatPer1000Weight),
      cst_encode_u_64(raw.balanceMsat),
      cst_encode_u_64(raw.outboundCapacityMsat),
      cst_encode_u_64(raw.inboundCapacityMsat),
      cst_encode_opt_box_autoadd_u_32(raw.confirmationsRequired),
      cst_encode_opt_box_autoadd_u_32(raw.confirmations),
      cst_encode_bool(raw.isOutbound),
      cst_encode_bool(raw.isChannelReady),
      cst_encode_bool(raw.isUsable),
      cst_encode_bool(raw.isPublic)
    ];
  }

  @protected
  List<dynamic> cst_encode_channel_id(ChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_u_8_array_32(raw.data)];
  }

  @protected
  List<dynamic> cst_encode_config(Config raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.storageDirPath),
      cst_encode_opt_String(raw.logDirPath),
      cst_encode_network(raw.network),
      cst_encode_opt_list_socket_address(raw.listeningAddresses),
      cst_encode_u_32(raw.defaultCltvExpiryDelta),
      cst_encode_u_64(raw.onchainWalletSyncIntervalSecs),
      cst_encode_u_64(raw.walletSyncIntervalSecs),
      cst_encode_u_64(raw.feeRateCacheUpdateIntervalSecs),
      cst_encode_list_public_key(raw.trustedPeers0Conf),
      cst_encode_u_64(raw.probingLiquidityLimitMultiplier),
      cst_encode_log_level(raw.logLevel)
    ];
  }

  @protected
  List<dynamic> cst_encode_entropy_source_config(EntropySourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is EntropySourceConfig_SeedFile) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is EntropySourceConfig_SeedBytes) {
      return [1, cst_encode_u_8_array_64(raw.field0)];
    }
    if (raw is EntropySourceConfig_Bip39Mnemonic) {
      return [
        2,
        cst_encode_box_autoadd_ldk_mnemonic(raw.mnemonic),
        cst_encode_opt_String(raw.passphrase)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_event(Event raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is Event_PaymentSuccessful) {
      return [0, cst_encode_box_autoadd_payment_hash(raw.paymentHash)];
    }
    if (raw is Event_PaymentFailed) {
      return [1, cst_encode_box_autoadd_payment_hash(raw.paymentHash)];
    }
    if (raw is Event_PaymentReceived) {
      return [
        2,
        cst_encode_box_autoadd_payment_hash(raw.paymentHash),
        cst_encode_u_64(raw.amountMsat)
      ];
    }
    if (raw is Event_ChannelReady) {
      return [
        3,
        cst_encode_box_autoadd_channel_id(raw.channelId),
        cst_encode_box_autoadd_user_channel_id(raw.userChannelId),
        cst_encode_opt_box_autoadd_public_key(raw.counterpartyNodeId)
      ];
    }
    if (raw is Event_ChannelClosed) {
      return [
        4,
        cst_encode_box_autoadd_channel_id(raw.channelId),
        cst_encode_box_autoadd_user_channel_id(raw.userChannelId),
        cst_encode_opt_box_autoadd_public_key(raw.counterpartyNodeId)
      ];
    }
    if (raw is Event_ChannelPending) {
      return [
        5,
        cst_encode_box_autoadd_channel_id(raw.channelId),
        cst_encode_box_autoadd_user_channel_id(raw.userChannelId),
        cst_encode_box_autoadd_channel_id(raw.formerTemporaryChannelId),
        cst_encode_box_autoadd_public_key(raw.counterpartyNodeId),
        cst_encode_box_autoadd_out_point(raw.fundingTxo)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_gossip_source_config(GossipSourceConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is GossipSourceConfig_P2PNetwork) {
      return [0];
    }
    if (raw is GossipSourceConfig_RapidGossipSync) {
      return [1, cst_encode_String(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_ldk_mnemonic(LdkMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.seedPhrase)];
  }

  @protected
  List<dynamic> cst_encode_ldk_node(LdkNode raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_NodeSqliteStore(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_list_channel_details(List<ChannelDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_channel_details).toList();
  }

  @protected
  List<dynamic> cst_encode_list_payment_details(List<PaymentDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_payment_details).toList();
  }

  @protected
  List<dynamic> cst_encode_list_peer_details(List<PeerDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_peer_details).toList();
  }

  @protected
  List<int> cst_encode_list_prim_u_8_loose(List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  List<dynamic> cst_encode_list_public_key(List<PublicKey> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_public_key).toList();
  }

  @protected
  List<dynamic> cst_encode_list_socket_address(List<SocketAddress> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_socket_address).toList();
  }

  @protected
  List<dynamic> cst_encode_max_dust_htlc_exposure(MaxDustHTLCExposure raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is MaxDustHTLCExposure_FixedLimitMsat) {
      return [0, cst_encode_u_64(raw.field0)];
    }
    if (raw is MaxDustHTLCExposure_FeeRateMultiplier) {
      return [1, cst_encode_u_64(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  String? cst_encode_opt_String(String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_String(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? null
        : cst_encode_box_autoadd_chain_data_source_config(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_channel_config(ChannelConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_channel_config(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_entropy_source_config(
      EntropySourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? null
        : cst_encode_box_autoadd_entropy_source_config(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_event(Event? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_event(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_gossip_source_config(
      GossipSourceConfig? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? null
        : cst_encode_box_autoadd_gossip_source_config(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_payment_details(
      PaymentDetails? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_payment_details(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_payment_preimage(
      PaymentPreimage? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_payment_preimage(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_payment_secret(PaymentSecret? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_payment_secret(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_public_key(PublicKey? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_public_key(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  Object? cst_encode_opt_box_autoadd_u_64(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_list_socket_address(List<SocketAddress>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_list_socket_address(raw);
  }

  @protected
  List<dynamic> cst_encode_out_point(OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_txid(raw.txid), cst_encode_u_32(raw.vout)];
  }

  @protected
  List<dynamic> cst_encode_payment_details(PaymentDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_payment_hash(raw.hash),
      cst_encode_opt_box_autoadd_payment_preimage(raw.preimage),
      cst_encode_opt_box_autoadd_payment_secret(raw.secret),
      cst_encode_opt_box_autoadd_u_64(raw.amountMsat),
      cst_encode_payment_direction(raw.direction),
      cst_encode_payment_status(raw.status)
    ];
  }

  @protected
  List<dynamic> cst_encode_payment_hash(PaymentHash raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_u_8_array_32(raw.data)];
  }

  @protected
  List<dynamic> cst_encode_payment_preimage(PaymentPreimage raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_u_8_array_32(raw.data)];
  }

  @protected
  List<dynamic> cst_encode_payment_secret(PaymentSecret raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_u_8_array_32(raw.data)];
  }

  @protected
  List<dynamic> cst_encode_peer_details(PeerDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_public_key(raw.nodeId),
      cst_encode_socket_address(raw.address),
      cst_encode_bool(raw.isConnected)
    ];
  }

  @protected
  List<dynamic> cst_encode_public_key(PublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.hex)];
  }

  @protected
  List<dynamic> cst_encode_socket_address(SocketAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is SocketAddress_TcpIpV4) {
      return [0, cst_encode_u_8_array_4(raw.addr), cst_encode_u_16(raw.port)];
    }
    if (raw is SocketAddress_TcpIpV6) {
      return [1, cst_encode_u_8_array_16(raw.addr), cst_encode_u_16(raw.port)];
    }
    if (raw is SocketAddress_OnionV2) {
      return [2, cst_encode_u_8_array_12(raw.field0)];
    }
    if (raw is SocketAddress_OnionV3) {
      return [
        3,
        cst_encode_u_8_array_32(raw.ed25519Pubkey),
        cst_encode_u_16(raw.checksum),
        cst_encode_u_8(raw.version),
        cst_encode_u_16(raw.port)
      ];
    }
    if (raw is SocketAddress_Hostname) {
      return [4, cst_encode_String(raw.addr), cst_encode_u_16(raw.port)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_txid(Txid raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.hash)];
  }

  @protected
  Object cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_12(U8Array12 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_16(U8Array16 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_32(U8Array32 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_4(U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return Uint8List.fromList(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_64(U8Array64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return Uint8List.fromList(raw);
  }

  @protected
  List<dynamic> cst_encode_user_channel_id(UserChannelId raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_u_64(raw.data)];
  }

  @protected
  int cst_encode_RustOpaque_NodeSqliteStore(NodeSqliteStore raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_builder_exception(BuilderException raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_log_level(LogLevel raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_node_exception(NodeException raw);

  @protected
  int cst_encode_payment_direction(PaymentDirection raw);

  @protected
  int cst_encode_payment_status(PaymentStatus raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void sse_encode_RustOpaque_NodeSqliteStore(
      NodeSqliteStore self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address(Address self, SseSerializer serializer);

  @protected
  void sse_encode_bolt_11_invoice(Bolt11Invoice self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address(Address self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bolt_11_invoice(
      Bolt11Invoice self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_config(
      ChannelConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_channel_id(
      ChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_config(Config self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_entropy_source_config(
      EntropySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_event(Event self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_gossip_source_config(
      GossipSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ldk_mnemonic(
      LdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ldk_node(LdkNode self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_details(
      PaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_hash(
      PaymentHash self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_preimage(
      PaymentPreimage self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_secret(
      PaymentSecret self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_public_key(
      PublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_socket_address(
      SocketAddress self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_user_channel_id(
      UserChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_builder_exception(
      BuilderException self, SseSerializer serializer);

  @protected
  void sse_encode_chain_data_source_config(
      ChainDataSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_channel_config(ChannelConfig self, SseSerializer serializer);

  @protected
  void sse_encode_channel_details(
      ChannelDetails self, SseSerializer serializer);

  @protected
  void sse_encode_channel_id(ChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_config(Config self, SseSerializer serializer);

  @protected
  void sse_encode_entropy_source_config(
      EntropySourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_event(Event self, SseSerializer serializer);

  @protected
  void sse_encode_gossip_source_config(
      GossipSourceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_ldk_mnemonic(LdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_ldk_node(LdkNode self, SseSerializer serializer);

  @protected
  void sse_encode_list_channel_details(
      List<ChannelDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_payment_details(
      List<PaymentDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_peer_details(
      List<PeerDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_public_key(
      List<PublicKey> self, SseSerializer serializer);

  @protected
  void sse_encode_list_socket_address(
      List<SocketAddress> self, SseSerializer serializer);

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer);

  @protected
  void sse_encode_max_dust_htlc_exposure(
      MaxDustHTLCExposure self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_node_exception(NodeException self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_channel_config(
      ChannelConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_entropy_source_config(
      EntropySourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_event(Event? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_gossip_source_config(
      GossipSourceConfig? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_details(
      PaymentDetails? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_preimage(
      PaymentPreimage? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment_secret(
      PaymentSecret? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_public_key(
      PublicKey? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_socket_address(
      List<SocketAddress>? self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payment_details(
      PaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_payment_direction(
      PaymentDirection self, SseSerializer serializer);

  @protected
  void sse_encode_payment_hash(PaymentHash self, SseSerializer serializer);

  @protected
  void sse_encode_payment_preimage(
      PaymentPreimage self, SseSerializer serializer);

  @protected
  void sse_encode_payment_secret(PaymentSecret self, SseSerializer serializer);

  @protected
  void sse_encode_payment_status(PaymentStatus self, SseSerializer serializer);

  @protected
  void sse_encode_peer_details(PeerDetails self, SseSerializer serializer);

  @protected
  void sse_encode_public_key(PublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_socket_address(SocketAddress self, SseSerializer serializer);

  @protected
  void sse_encode_txid(Txid self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_12(U8Array12 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_64(U8Array64 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_user_channel_id(UserChannelId self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);
}

// Section: wire_class

class LdkCoreWire implements BaseWire {
  LdkCoreWire.fromExternalLibrary(ExternalLibrary lib);

  void wire_build_with_sqlite_store(
          NativePortType port_,
          List<dynamic> config,
          List<dynamic>? chain_data_source_config,
          List<dynamic>? entropy_source_config,
          List<dynamic>? gossip_source_config) =>
      wasmModule.wire_build_with_sqlite_store(
          port_,
          config,
          chain_data_source_config,
          entropy_source_config,
          gossip_source_config);

  void wire_ldk_mnemonic_generate(NativePortType port_) =>
      wasmModule.wire_ldk_mnemonic_generate(port_);

  void wire_ldk_node_close_channel(NativePortType port_, List<dynamic> that,
          List<dynamic> channel_id, List<dynamic> counterparty_node_id) =>
      wasmModule.wire_ldk_node_close_channel(
          port_, that, channel_id, counterparty_node_id);

  void wire_ldk_node_connect(NativePortType port_, List<dynamic> that,
          List<dynamic> node_id, List<dynamic> address, bool persist) =>
      wasmModule.wire_ldk_node_connect(port_, that, node_id, address, persist);

  void wire_ldk_node_connect_open_channel(
          NativePortType port_,
          List<dynamic> that,
          List<dynamic> socket_address,
          List<dynamic> node_id,
          Object channel_amount_sats,
          Object? push_to_counterparty_msat,
          bool announce_channel,
          List<dynamic>? channel_config) =>
      wasmModule.wire_ldk_node_connect_open_channel(
          port_,
          that,
          socket_address,
          node_id,
          channel_amount_sats,
          push_to_counterparty_msat,
          announce_channel,
          channel_config);

  void wire_ldk_node_disconnect(NativePortType port_, List<dynamic> that,
          List<dynamic> counterparty_node_id) =>
      wasmModule.wire_ldk_node_disconnect(port_, that, counterparty_node_id);

  void wire_ldk_node_event_handled(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_event_handled(port_, that);

  void wire_ldk_node_is_running(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_is_running(port_, that);

  void wire_ldk_node_list_channels(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_list_channels(port_, that);

  void wire_ldk_node_list_payments(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_list_payments(port_, that);

  void wire_ldk_node_list_payments_with_filter(
          NativePortType port_, List<dynamic> that, int payment_direction) =>
      wasmModule.wire_ldk_node_list_payments_with_filter(
          port_, that, payment_direction);

  void wire_ldk_node_list_peers(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_list_peers(port_, that);

  void wire_ldk_node_listening_addresses(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_listening_addresses(port_, that);

  void wire_ldk_node_new_onchain_address(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_new_onchain_address(port_, that);

  void wire_ldk_node_next_event(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_next_event(port_, that);

  void wire_ldk_node_node_id(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_node_id(port_, that);

  void wire_ldk_node_payment(NativePortType port_, List<dynamic> that,
          List<dynamic> payment_hash) =>
      wasmModule.wire_ldk_node_payment(port_, that, payment_hash);

  void wire_ldk_node_receive_payment(NativePortType port_, List<dynamic> that,
          Object amount_msat, String description, int expiry_secs) =>
      wasmModule.wire_ldk_node_receive_payment(
          port_, that, amount_msat, description, expiry_secs);

  void wire_ldk_node_receive_variable_amount_payment(NativePortType port_,
          List<dynamic> that, String description, int expiry_secs) =>
      wasmModule.wire_ldk_node_receive_variable_amount_payment(
          port_, that, description, expiry_secs);

  void wire_ldk_node_remove_payment(NativePortType port_, List<dynamic> that,
          List<dynamic> payment_hash) =>
      wasmModule.wire_ldk_node_remove_payment(port_, that, payment_hash);

  void wire_ldk_node_send_all_to_onchain_address(
          NativePortType port_, List<dynamic> that, List<dynamic> address) =>
      wasmModule.wire_ldk_node_send_all_to_onchain_address(
          port_, that, address);

  void wire_ldk_node_send_payment(
          NativePortType port_, List<dynamic> that, List<dynamic> invoice) =>
      wasmModule.wire_ldk_node_send_payment(port_, that, invoice);

  void wire_ldk_node_send_payment_probes(
          NativePortType port_, List<dynamic> that, List<dynamic> invoice) =>
      wasmModule.wire_ldk_node_send_payment_probes(port_, that, invoice);

  void wire_ldk_node_send_payment_probes_using_amount(NativePortType port_,
          List<dynamic> that, List<dynamic> invoice, Object amount_msat) =>
      wasmModule.wire_ldk_node_send_payment_probes_using_amount(
          port_, that, invoice, amount_msat);

  void wire_ldk_node_send_payment_using_amount(NativePortType port_,
          List<dynamic> that, List<dynamic> invoice, Object amount_msat) =>
      wasmModule.wire_ldk_node_send_payment_using_amount(
          port_, that, invoice, amount_msat);

  void wire_ldk_node_send_spontaneous_payment(NativePortType port_,
          List<dynamic> that, Object amount_msat, List<dynamic> node_id) =>
      wasmModule.wire_ldk_node_send_spontaneous_payment(
          port_, that, amount_msat, node_id);

  void wire_ldk_node_send_spontaneous_payment_probes(NativePortType port_,
          List<dynamic> that, Object amount_msat, List<dynamic> node_id) =>
      wasmModule.wire_ldk_node_send_spontaneous_payment_probes(
          port_, that, amount_msat, node_id);

  void wire_ldk_node_send_to_onchain_address(NativePortType port_,
          List<dynamic> that, List<dynamic> address, Object amount_sats) =>
      wasmModule.wire_ldk_node_send_to_onchain_address(
          port_, that, address, amount_sats);

  void wire_ldk_node_sign_message(
          NativePortType port_, List<dynamic> that, List<int> msg) =>
      wasmModule.wire_ldk_node_sign_message(port_, that, msg);

  void wire_ldk_node_spendable_onchain_balance_sats(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_spendable_onchain_balance_sats(port_, that);

  void wire_ldk_node_start(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_start(port_, that);

  void wire_ldk_node_stop(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_stop(port_, that);

  void wire_ldk_node_sync_wallets(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_sync_wallets(port_, that);

  void wire_ldk_node_total_onchain_balance_sats(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_total_onchain_balance_sats(port_, that);

  void wire_ldk_node_update_channel_config(
          NativePortType port_,
          List<dynamic> that,
          List<dynamic> channel_id,
          List<dynamic> counterparty_node_id,
          List<dynamic> channel_config) =>
      wasmModule.wire_ldk_node_update_channel_config(
          port_, that, channel_id, counterparty_node_id, channel_config);

  void wire_ldk_node_verify_signature(NativePortType port_, List<dynamic> that,
          List<int> msg, String sig, List<dynamic> pkey) =>
      wasmModule.wire_ldk_node_verify_signature(port_, that, msg, sig, pkey);

  void wire_ldk_node_wait_next_event(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_ldk_node_wait_next_event(port_, that);

  void wire_socket_address_as_string(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_socket_address_as_string(port_, that);

  void wire_socket_address_from_str(NativePortType port_, String address) =>
      wasmModule.wire_socket_address_from_str(port_, address);

  void rust_arc_increment_strong_count_RustOpaque_NodeSqliteStore(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_NodeSqliteStore(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_NodeSqliteStore(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_NodeSqliteStore(ptr);
}

@JS('wasm_bindgen')
external LdkCoreWasmModule get wasmModule;

@JS()
@anonymous
class LdkCoreWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external LdkCoreWasmModule bind(dynamic thisArg, String moduleName);

  external void wire_build_with_sqlite_store(
      NativePortType port_,
      List<dynamic> config,
      List<dynamic>? chain_data_source_config,
      List<dynamic>? entropy_source_config,
      List<dynamic>? gossip_source_config);

  external void wire_ldk_mnemonic_generate(NativePortType port_);

  external void wire_ldk_node_close_channel(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> channel_id,
      List<dynamic> counterparty_node_id);

  external void wire_ldk_node_connect(NativePortType port_, List<dynamic> that,
      List<dynamic> node_id, List<dynamic> address, bool persist);

  external void wire_ldk_node_connect_open_channel(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> socket_address,
      List<dynamic> node_id,
      Object channel_amount_sats,
      Object? push_to_counterparty_msat,
      bool announce_channel,
      List<dynamic>? channel_config);

  external void wire_ldk_node_disconnect(NativePortType port_,
      List<dynamic> that, List<dynamic> counterparty_node_id);

  external void wire_ldk_node_event_handled(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_is_running(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_list_channels(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_list_payments(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_list_payments_with_filter(
      NativePortType port_, List<dynamic> that, int payment_direction);

  external void wire_ldk_node_list_peers(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_listening_addresses(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_new_onchain_address(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_next_event(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_node_id(NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_payment(
      NativePortType port_, List<dynamic> that, List<dynamic> payment_hash);

  external void wire_ldk_node_receive_payment(
      NativePortType port_,
      List<dynamic> that,
      Object amount_msat,
      String description,
      int expiry_secs);

  external void wire_ldk_node_receive_variable_amount_payment(
      NativePortType port_,
      List<dynamic> that,
      String description,
      int expiry_secs);

  external void wire_ldk_node_remove_payment(
      NativePortType port_, List<dynamic> that, List<dynamic> payment_hash);

  external void wire_ldk_node_send_all_to_onchain_address(
      NativePortType port_, List<dynamic> that, List<dynamic> address);

  external void wire_ldk_node_send_payment(
      NativePortType port_, List<dynamic> that, List<dynamic> invoice);

  external void wire_ldk_node_send_payment_probes(
      NativePortType port_, List<dynamic> that, List<dynamic> invoice);

  external void wire_ldk_node_send_payment_probes_using_amount(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> invoice,
      Object amount_msat);

  external void wire_ldk_node_send_payment_using_amount(NativePortType port_,
      List<dynamic> that, List<dynamic> invoice, Object amount_msat);

  external void wire_ldk_node_send_spontaneous_payment(NativePortType port_,
      List<dynamic> that, Object amount_msat, List<dynamic> node_id);

  external void wire_ldk_node_send_spontaneous_payment_probes(
      NativePortType port_,
      List<dynamic> that,
      Object amount_msat,
      List<dynamic> node_id);

  external void wire_ldk_node_send_to_onchain_address(NativePortType port_,
      List<dynamic> that, List<dynamic> address, Object amount_sats);

  external void wire_ldk_node_sign_message(
      NativePortType port_, List<dynamic> that, List<int> msg);

  external void wire_ldk_node_spendable_onchain_balance_sats(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_start(NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_stop(NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_sync_wallets(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_total_onchain_balance_sats(
      NativePortType port_, List<dynamic> that);

  external void wire_ldk_node_update_channel_config(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> channel_id,
      List<dynamic> counterparty_node_id,
      List<dynamic> channel_config);

  external void wire_ldk_node_verify_signature(NativePortType port_,
      List<dynamic> that, List<int> msg, String sig, List<dynamic> pkey);

  external void wire_ldk_node_wait_next_event(
      NativePortType port_, List<dynamic> that);

  external void wire_socket_address_as_string(
      NativePortType port_, List<dynamic> that);

  external void wire_socket_address_from_str(
      NativePortType port_, String address);

  external void rust_arc_increment_strong_count_RustOpaque_NodeSqliteStore(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_NodeSqliteStore(
      dynamic ptr);
}
