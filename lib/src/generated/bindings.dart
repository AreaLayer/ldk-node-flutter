// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class RustLdkNodeImpl implements RustLdkNode {
  final RustLdkNodePlatform _platform;
  factory RustLdkNodeImpl(ExternalLibrary dylib) => RustLdkNodeImpl.raw(RustLdkNodePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustLdkNodeImpl.wasm(FutureOr<WasmModule> module) => RustLdkNodeImpl(module as ExternalLibrary);
  RustLdkNodeImpl.raw(this._platform);
  Future<NodePointer> buildNode(
      {required Config config, ChainDataSourceConfig? chainDataSourceConfig, EntropySourceConfig? entropySourceConfig, GossipSourceConfig? gossipSourceConfig, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_config(config);
    var arg1 = _platform.api2wire_opt_box_autoadd_chain_data_source_config(chainDataSourceConfig);
    var arg2 = _platform.api2wire_opt_box_autoadd_entropy_source_config(entropySourceConfig);
    var arg3 = _platform.api2wire_opt_box_autoadd_gossip_source_config(gossipSourceConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_build_node(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_node_pointer(d),
      constMeta: kBuildNodeConstMeta,
      argValues: [config, chainDataSourceConfig, entropySourceConfig, gossipSourceConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBuildNodeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "build_node",
        argNames: ["config", "chainDataSourceConfig", "entropySourceConfig", "gossipSourceConfig"],
      );

  Future<void> startMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kStartMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "start__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> stopMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kStopMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "stop__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> eventHandledMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_event_handled__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kEventHandledMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEventHandledMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "event_handled__method__NodePointer",
        argNames: ["that"],
      );

  Future<Event?> nextEventMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_next_event__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_event,
      constMeta: kNextEventMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNextEventMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "next_event__method__NodePointer",
        argNames: ["that"],
      );

  Future<Event> waitUntilNextEventMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_wait_until_next_event__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_event,
      constMeta: kWaitUntilNextEventMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWaitUntilNextEventMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "wait_until_next_event__method__NodePointer",
        argNames: ["that"],
      );

  Future<PublicKey> nodeIdMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_node_id__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_public_key,
      constMeta: kNodeIdMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNodeIdMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "node_id__method__NodePointer",
        argNames: ["that"],
      );

  Future<NetAddress?> listeningAddressMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_listening_address__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_net_address,
      constMeta: kListeningAddressMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListeningAddressMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "listening_address__method__NodePointer",
        argNames: ["that"],
      );

  Future<Address> newFundingAddressMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_funding_address__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_address,
      constMeta: kNewFundingAddressMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewFundingAddressMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_funding_address__method__NodePointer",
        argNames: ["that"],
      );

  Future<Balance> onChainBalanceMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_on_chain_balance__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_balance,
      constMeta: kOnChainBalanceMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOnChainBalanceMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "on_chain_balance__method__NodePointer",
        argNames: ["that"],
      );

  Future<Txid> sendToOnChainAddressMethodNodePointer({required NodePointer that, required Address address, required int amountSats, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_address(address);
    var arg2 = _platform.api2wire_u64(amountSats);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_to_on_chain_address__method__NodePointer(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_txid,
      constMeta: kSendToOnChainAddressMethodNodePointerConstMeta,
      argValues: [that, address, amountSats],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendToOnChainAddressMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_to_on_chain_address__method__NodePointer",
        argNames: ["that", "address", "amountSats"],
      );

  Future<Txid> sendAllToOnChainAddressMethodNodePointer({required NodePointer that, required Address address, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_address(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_all_to_on_chain_address__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_txid,
      constMeta: kSendAllToOnChainAddressMethodNodePointerConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendAllToOnChainAddressMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_all_to_on_chain_address__method__NodePointer",
        argNames: ["that", "address"],
      );

  Future<int> spendableOnchainBalanceSatsMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_spendable_onchain_balance_sats__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kSpendableOnchainBalanceSatsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpendableOnchainBalanceSatsMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "spendable_onchain_balance_sats__method__NodePointer",
        argNames: ["that"],
      );

  Future<int> totalOnchainBalanceSatsMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_total_onchain_balance_sats__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kTotalOnchainBalanceSatsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTotalOnchainBalanceSatsMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "total_onchain_balance_sats__method__NodePointer",
        argNames: ["that"],
      );

  Future<List<ChannelDetails>> listChannelsMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_channels__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_list_channel_details,
      constMeta: kListChannelsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListChannelsMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_channels__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> connectMethodNodePointer({required NodePointer that, required PublicKey nodeId, required NetAddress address, required bool permanently, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_public_key(nodeId);
    var arg2 = _platform.api2wire_box_autoadd_net_address(address);
    var arg3 = permanently;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect__method__NodePointer(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectMethodNodePointerConstMeta,
      argValues: [that, nodeId, address, permanently],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect__method__NodePointer",
        argNames: ["that", "nodeId", "address", "permanently"],
      );

  Future<void> disconnectMethodNodePointer({required NodePointer that, required PublicKey counterpartyNodeId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_public_key(counterpartyNodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_disconnect__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kDisconnectMethodNodePointerConstMeta,
      argValues: [that, counterpartyNodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect__method__NodePointer",
        argNames: ["that", "counterpartyNodeId"],
      );

  Future<void> connectOpenChannelMethodNodePointer(
      {required NodePointer that, required NetAddress address, required PublicKey nodeId, required int channelAmountSats, int? pushToCounterpartyMsat, required bool announceChannel, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_net_address(address);
    var arg2 = _platform.api2wire_box_autoadd_public_key(nodeId);
    var arg3 = _platform.api2wire_u64(channelAmountSats);
    var arg4 = _platform.api2wire_opt_box_autoadd_u64(pushToCounterpartyMsat);
    var arg5 = announceChannel;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_open_channel__method__NodePointer(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectOpenChannelMethodNodePointerConstMeta,
      argValues: [that, address, nodeId, channelAmountSats, pushToCounterpartyMsat, announceChannel],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectOpenChannelMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_open_channel__method__NodePointer",
        argNames: ["that", "address", "nodeId", "channelAmountSats", "pushToCounterpartyMsat", "announceChannel"],
      );

  Future<void> syncWalletsMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync_wallets__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSyncWalletsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncWalletsMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_wallets__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> closeChannelMethodNodePointer({required NodePointer that, required ChannelId channelId, required PublicKey counterpartyNodeId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_channel_id(channelId);
    var arg2 = _platform.api2wire_box_autoadd_public_key(counterpartyNodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_channel__method__NodePointer(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kCloseChannelMethodNodePointerConstMeta,
      argValues: [that, channelId, counterpartyNodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseChannelMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_channel__method__NodePointer",
        argNames: ["that", "channelId", "counterpartyNodeId"],
      );

  Future<PaymentHash> sendPaymentMethodNodePointer({required NodePointer that, required Invoice invoice, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_invoice(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_payment__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_payment_hash,
      constMeta: kSendPaymentMethodNodePointerConstMeta,
      argValues: [that, invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendPaymentMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment__method__NodePointer",
        argNames: ["that", "invoice"],
      );

  Future<PaymentHash> sendPaymentUsingAmountMethodNodePointer({required NodePointer that, required Invoice invoice, required int amountMsat, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_invoice(invoice);
    var arg2 = _platform.api2wire_u64(amountMsat);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_payment_using_amount__method__NodePointer(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_payment_hash,
      constMeta: kSendPaymentUsingAmountMethodNodePointerConstMeta,
      argValues: [that, invoice, amountMsat],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendPaymentUsingAmountMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment_using_amount__method__NodePointer",
        argNames: ["that", "invoice", "amountMsat"],
      );

  Future<PaymentHash> sendSpontaneousPaymentMethodNodePointer({required NodePointer that, required int amountMsat, required PublicKey nodeId, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_u64(amountMsat);
    var arg2 = _platform.api2wire_box_autoadd_public_key(nodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_spontaneous_payment__method__NodePointer(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_payment_hash,
      constMeta: kSendSpontaneousPaymentMethodNodePointerConstMeta,
      argValues: [that, amountMsat, nodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_spontaneous_payment__method__NodePointer",
        argNames: ["that", "amountMsat", "nodeId"],
      );

  Future<Invoice> receivePaymentMethodNodePointer({required NodePointer that, required int amountMsat, required String description, required int expirySecs, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_u64(amountMsat);
    var arg2 = _platform.api2wire_String(description);
    var arg3 = api2wire_u32(expirySecs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_payment__method__NodePointer(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_invoice,
      constMeta: kReceivePaymentMethodNodePointerConstMeta,
      argValues: [that, amountMsat, description, expirySecs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceivePaymentMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_payment__method__NodePointer",
        argNames: ["that", "amountMsat", "description", "expirySecs"],
      );

  Future<Invoice> receiveVariableAmountPaymentMethodNodePointer({required NodePointer that, required String description, required int expirySecs, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_String(description);
    var arg2 = api2wire_u32(expirySecs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_variable_amount_payment__method__NodePointer(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_invoice,
      constMeta: kReceiveVariableAmountPaymentMethodNodePointerConstMeta,
      argValues: [that, description, expirySecs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceiveVariableAmountPaymentMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_variable_amount_payment__method__NodePointer",
        argNames: ["that", "description", "expirySecs"],
      );

  Future<PaymentDetails?> paymentMethodNodePointer({required NodePointer that, required PaymentHash paymentHash, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_payment_hash(paymentHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_payment__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_payment_details,
      constMeta: kPaymentMethodNodePointerConstMeta,
      argValues: [that, paymentHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPaymentMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "payment__method__NodePointer",
        argNames: ["that", "paymentHash"],
      );

  Future<bool> removePaymentMethodNodePointer({required NodePointer that, required PaymentHash paymentHash, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_payment_hash(paymentHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_remove_payment__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kRemovePaymentMethodNodePointerConstMeta,
      argValues: [that, paymentHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemovePaymentMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_payment__method__NodePointer",
        argNames: ["that", "paymentHash"],
      );

  Future<List<PaymentDetails>> listPaymentsWithFilterMethodNodePointer({required NodePointer that, required PaymentDirection paymentDirection, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = api2wire_payment_direction(paymentDirection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_payments_with_filter__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_payment_details,
      constMeta: kListPaymentsWithFilterMethodNodePointerConstMeta,
      argValues: [that, paymentDirection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPaymentsWithFilterMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_payments_with_filter__method__NodePointer",
        argNames: ["that", "paymentDirection"],
      );

  Future<List<PaymentDetails>> listPaymentsMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_payments__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_list_payment_details,
      constMeta: kListPaymentsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPaymentsMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_payments__method__NodePointer",
        argNames: ["that"],
      );

  Future<List<PeerDetails>> listPeersMethodNodePointer({required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_peers__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_list_peer_details,
      constMeta: kListPeersMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPeersMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_peers__method__NodePointer",
        argNames: ["that"],
      );

  Future<String> signMessageMethodNodePointer({required NodePointer that, required Uint8List msg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_uint_8_list(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sign_message__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignMessageMethodNodePointerConstMeta,
      argValues: [that, msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMessageMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_message__method__NodePointer",
        argNames: ["that", "msg"],
      );

  Future<bool> verifySignatureMethodNodePointer({required NodePointer that, required Uint8List msg, required String sig, required PublicKey pkey, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_uint_8_list(msg);
    var arg2 = _platform.api2wire_String(sig);
    var arg3 = _platform.api2wire_box_autoadd_public_key(pkey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_verify_signature__method__NodePointer(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bool,
      constMeta: kVerifySignatureMethodNodePointerConstMeta,
      argValues: [that, msg, sig, pkey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVerifySignatureMethodNodePointerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_signature__method__NodePointer",
        argNames: ["that", "msg", "sig", "pkey"],
      );

  DropFnType get dropOpaqueMutexArcNodeSqliteStore => _platform.inner.drop_opaque_MutexArcNodeSqliteStore;
  ShareFnType get shareOpaqueMutexArcNodeSqliteStore => _platform.inner.share_opaque_MutexArcNodeSqliteStore;
  OpaqueTypeFinalizer get MutexArcNodeSqliteStoreFinalizer => _platform.MutexArcNodeSqliteStoreFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  MutexArcNodeSqliteStore _wire2api_MutexArcNodeSqliteStore(dynamic raw) {
    return MutexArcNodeSqliteStore.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Address _wire2api_address(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Address(
      internal: _wire2api_String(arr[0]),
    );
  }

  Balance _wire2api_balance(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Balance(
      immature: _wire2api_u64(arr[0]),
      trustedPending: _wire2api_u64(arr[1]),
      untrustedPending: _wire2api_u64(arr[2]),
      confirmed: _wire2api_u64(arr[3]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ChannelId _wire2api_box_autoadd_channel_id(dynamic raw) {
    return _wire2api_channel_id(raw);
  }

  Event _wire2api_box_autoadd_event(dynamic raw) {
    return _wire2api_event(raw);
  }

  NetAddress _wire2api_box_autoadd_net_address(dynamic raw) {
    return _wire2api_net_address(raw);
  }

  OutPoint _wire2api_box_autoadd_out_point(dynamic raw) {
    return _wire2api_out_point(raw);
  }

  PaymentDetails _wire2api_box_autoadd_payment_details(dynamic raw) {
    return _wire2api_payment_details(raw);
  }

  PaymentHash _wire2api_box_autoadd_payment_hash(dynamic raw) {
    return _wire2api_payment_hash(raw);
  }

  PaymentPreimage _wire2api_box_autoadd_payment_preimage(dynamic raw) {
    return _wire2api_payment_preimage(raw);
  }

  PaymentSecret _wire2api_box_autoadd_payment_secret(dynamic raw) {
    return _wire2api_payment_secret(raw);
  }

  PublicKey _wire2api_box_autoadd_public_key(dynamic raw) {
    return _wire2api_public_key(raw);
  }

  int _wire2api_box_autoadd_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  UserChannelId _wire2api_box_autoadd_user_channel_id(dynamic raw) {
    return _wire2api_user_channel_id(raw);
  }

  ChannelDetails _wire2api_channel_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 22) throw Exception('unexpected arr length: expect 22 but see ${arr.length}');
    return ChannelDetails(
      channelId: _wire2api_channel_id(arr[0]),
      fundingTxo: _wire2api_opt_String(arr[1]),
      shortChannelId: _wire2api_opt_box_autoadd_u64(arr[2]),
      outboundScidAlias: _wire2api_opt_box_autoadd_u64(arr[3]),
      inboundScidAlias: _wire2api_opt_box_autoadd_u64(arr[4]),
      channelValueSatoshis: _wire2api_u64(arr[5]),
      unspendablePunishmentReserve: _wire2api_opt_box_autoadd_u64(arr[6]),
      userChannelId: _wire2api_user_channel_id(arr[7]),
      feerateSatPer1000Weight: _wire2api_u32(arr[8]),
      balanceMsat: _wire2api_u64(arr[9]),
      outboundCapacityMsat: _wire2api_u64(arr[10]),
      nextOutboundHtlcLimitMsat: _wire2api_u64(arr[11]),
      inboundCapacityMsat: _wire2api_u64(arr[12]),
      confirmationsRequired: _wire2api_opt_box_autoadd_u32(arr[13]),
      confirmations: _wire2api_opt_box_autoadd_u32(arr[14]),
      forceCloseSpendDelay: _wire2api_opt_box_autoadd_u16(arr[15]),
      isOutbound: _wire2api_bool(arr[16]),
      isChannelReady: _wire2api_bool(arr[17]),
      isUsable: _wire2api_bool(arr[18]),
      isPublic: _wire2api_bool(arr[19]),
      inboundHtlcMinimumMsat: _wire2api_opt_box_autoadd_u64(arr[20]),
      inboundHtlcMaximumMsat: _wire2api_opt_box_autoadd_u64(arr[21]),
    );
  }

  ChannelId _wire2api_channel_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ChannelId(
      internal: _wire2api_u8_array_32(arr[0]),
    );
  }

  Event _wire2api_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Event_PaymentSuccessful(
          paymentHash: _wire2api_box_autoadd_payment_hash(raw[1]),
        );
      case 1:
        return Event_PaymentFailed(
          paymentHash: _wire2api_box_autoadd_payment_hash(raw[1]),
        );
      case 2:
        return Event_PaymentReceived(
          paymentHash: _wire2api_box_autoadd_payment_hash(raw[1]),
          amountMsat: _wire2api_u64(raw[2]),
        );
      case 3:
        return Event_ChannelReady(
          channelId: _wire2api_box_autoadd_channel_id(raw[1]),
          userChannelId: _wire2api_box_autoadd_user_channel_id(raw[2]),
        );
      case 4:
        return Event_ChannelClosed(
          channelId: _wire2api_box_autoadd_channel_id(raw[1]),
          userChannelId: _wire2api_box_autoadd_user_channel_id(raw[2]),
        );
      case 5:
        return Event_ChannelPending(
          channelId: _wire2api_box_autoadd_channel_id(raw[1]),
          userChannelId: _wire2api_box_autoadd_user_channel_id(raw[2]),
          formerTemporaryChannelId: _wire2api_box_autoadd_channel_id(raw[3]),
          counterpartyNodeId: _wire2api_box_autoadd_public_key(raw[4]),
          fundingTxo: _wire2api_box_autoadd_out_point(raw[5]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  Invoice _wire2api_invoice(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Invoice(
      internal: _wire2api_String(arr[0]),
    );
  }

  List<ChannelDetails> _wire2api_list_channel_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_channel_details).toList();
  }

  List<PaymentDetails> _wire2api_list_payment_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_payment_details).toList();
  }

  List<PeerDetails> _wire2api_list_peer_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_peer_details).toList();
  }

  NetAddress _wire2api_net_address(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return NetAddress_IPv4(
          addr: _wire2api_String(raw[1]),
          port: _wire2api_u16(raw[2]),
        );
      case 1:
        return NetAddress_IPv6(
          addr: _wire2api_String(raw[1]),
          port: _wire2api_u16(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  NodePointer _wire2api_node_pointer(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NodePointer(
      bridge: this,
      field0: _wire2api_MutexArcNodeSqliteStore(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Event? _wire2api_opt_box_autoadd_event(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_event(raw);
  }

  NetAddress? _wire2api_opt_box_autoadd_net_address(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_net_address(raw);
  }

  PaymentDetails? _wire2api_opt_box_autoadd_payment_details(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_payment_details(raw);
  }

  PaymentPreimage? _wire2api_opt_box_autoadd_payment_preimage(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_payment_preimage(raw);
  }

  PaymentSecret? _wire2api_opt_box_autoadd_payment_secret(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_payment_secret(raw);
  }

  int? _wire2api_opt_box_autoadd_u16(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u16(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  OutPoint _wire2api_out_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OutPoint(
      txid: _wire2api_txid(arr[0]),
      vout: _wire2api_u32(arr[1]),
    );
  }

  PaymentDetails _wire2api_payment_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PaymentDetails(
      hash: _wire2api_payment_hash(arr[0]),
      preimage: _wire2api_opt_box_autoadd_payment_preimage(arr[1]),
      secret: _wire2api_opt_box_autoadd_payment_secret(arr[2]),
      amountMsat: _wire2api_opt_box_autoadd_u64(arr[3]),
      direction: _wire2api_payment_direction(arr[4]),
      status: _wire2api_payment_status(arr[5]),
    );
  }

  PaymentDirection _wire2api_payment_direction(dynamic raw) {
    return PaymentDirection.values[raw as int];
  }

  PaymentHash _wire2api_payment_hash(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PaymentHash(
      internal: _wire2api_u8_array_32(arr[0]),
    );
  }

  PaymentPreimage _wire2api_payment_preimage(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PaymentPreimage(
      internal: _wire2api_u8_array_32(arr[0]),
    );
  }

  PaymentSecret _wire2api_payment_secret(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PaymentSecret(
      internal: _wire2api_u8_array_32(arr[0]),
    );
  }

  PaymentStatus _wire2api_payment_status(dynamic raw) {
    return PaymentStatus.values[raw as int];
  }

  PeerDetails _wire2api_peer_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PeerDetails(
      nodeId: _wire2api_public_key(arr[0]),
      address: _wire2api_net_address(arr[1]),
      isConnected: _wire2api_bool(arr[2]),
    );
  }

  PublicKey _wire2api_public_key(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PublicKey(
      internal: _wire2api_String(arr[0]),
    );
  }

  Txid _wire2api_txid(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Txid(
      internal: _wire2api_String(arr[0]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UserChannelId _wire2api_user_channel_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserChannelId(
      internal: _wire2api_u64(arr[0]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_log_level(LogLevel raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_payment_direction(PaymentDirection raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustLdkNodePlatform extends FlutterRustBridgeBase<RustLdkNodeWire> {
  RustLdkNodePlatform(ffi.DynamicLibrary dylib) : super(RustLdkNodeWire(dylib));

// Section: api2wire

  @protected
  wire_MutexArcNodeSqliteStore api2wire_MutexArcNodeSqliteStore(MutexArcNodeSqliteStore raw) {
    final ptr = inner.new_MutexArcNodeSqliteStore();
    _api_fill_to_wire_MutexArcNodeSqliteStore(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Address> api2wire_box_autoadd_address(Address raw) {
    final ptr = inner.new_box_autoadd_address_0();
    _api_fill_to_wire_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ChainDataSourceConfig> api2wire_box_autoadd_chain_data_source_config(ChainDataSourceConfig raw) {
    final ptr = inner.new_box_autoadd_chain_data_source_config_0();
    _api_fill_to_wire_chain_data_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ChannelId> api2wire_box_autoadd_channel_id(ChannelId raw) {
    final ptr = inner.new_box_autoadd_channel_id_0();
    _api_fill_to_wire_channel_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config_0();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EntropySourceConfig> api2wire_box_autoadd_entropy_source_config(EntropySourceConfig raw) {
    final ptr = inner.new_box_autoadd_entropy_source_config_0();
    _api_fill_to_wire_entropy_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GossipSourceConfig> api2wire_box_autoadd_gossip_source_config(GossipSourceConfig raw) {
    final ptr = inner.new_box_autoadd_gossip_source_config_0();
    _api_fill_to_wire_gossip_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Invoice> api2wire_box_autoadd_invoice(Invoice raw) {
    final ptr = inner.new_box_autoadd_invoice_0();
    _api_fill_to_wire_invoice(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Mnemonic> api2wire_box_autoadd_mnemonic(Mnemonic raw) {
    final ptr = inner.new_box_autoadd_mnemonic_0();
    _api_fill_to_wire_mnemonic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NetAddress> api2wire_box_autoadd_net_address(NetAddress raw) {
    final ptr = inner.new_box_autoadd_net_address_0();
    _api_fill_to_wire_net_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NodePointer> api2wire_box_autoadd_node_pointer(NodePointer raw) {
    final ptr = inner.new_box_autoadd_node_pointer_0();
    _api_fill_to_wire_node_pointer(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PaymentHash> api2wire_box_autoadd_payment_hash(PaymentHash raw) {
    final ptr = inner.new_box_autoadd_payment_hash_0();
    _api_fill_to_wire_payment_hash(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PublicKey> api2wire_box_autoadd_public_key(PublicKey raw) {
    final ptr = inner.new_box_autoadd_public_key_0();
    _api_fill_to_wire_public_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_ChainDataSourceConfig> api2wire_opt_box_autoadd_chain_data_source_config(ChainDataSourceConfig? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_chain_data_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_EntropySourceConfig> api2wire_opt_box_autoadd_entropy_source_config(EntropySourceConfig? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_entropy_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_GossipSourceConfig> api2wire_opt_box_autoadd_gossip_source_config(GossipSourceConfig? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_gossip_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_NetAddress> api2wire_opt_box_autoadd_net_address(NetAddress? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_net_address(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_32(U8Array32 raw) {
    final ans = inner.new_uint_8_list_0(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_64(U8Array64 raw) {
    final ans = inner.new_uint_8_list_0(64);
    ans.ref.ptr.asTypedList(64).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _MutexArcNodeSqliteStoreFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexArcNodeSqliteStorePtr);
  OpaqueTypeFinalizer get MutexArcNodeSqliteStoreFinalizer => _MutexArcNodeSqliteStoreFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_MutexArcNodeSqliteStore(MutexArcNodeSqliteStore apiObj, wire_MutexArcNodeSqliteStore wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_address(Address apiObj, wire_Address wireObj) {
    wireObj.internal = api2wire_String(apiObj.internal);
  }

  void _api_fill_to_wire_box_autoadd_address(Address apiObj, ffi.Pointer<wire_Address> wireObj) {
    _api_fill_to_wire_address(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_chain_data_source_config(ChainDataSourceConfig apiObj, ffi.Pointer<wire_ChainDataSourceConfig> wireObj) {
    _api_fill_to_wire_chain_data_source_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_channel_id(ChannelId apiObj, ffi.Pointer<wire_ChannelId> wireObj) {
    _api_fill_to_wire_channel_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_config(Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_entropy_source_config(EntropySourceConfig apiObj, ffi.Pointer<wire_EntropySourceConfig> wireObj) {
    _api_fill_to_wire_entropy_source_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_gossip_source_config(GossipSourceConfig apiObj, ffi.Pointer<wire_GossipSourceConfig> wireObj) {
    _api_fill_to_wire_gossip_source_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_invoice(Invoice apiObj, ffi.Pointer<wire_Invoice> wireObj) {
    _api_fill_to_wire_invoice(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_mnemonic(Mnemonic apiObj, ffi.Pointer<wire_Mnemonic> wireObj) {
    _api_fill_to_wire_mnemonic(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_net_address(NetAddress apiObj, ffi.Pointer<wire_NetAddress> wireObj) {
    _api_fill_to_wire_net_address(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_node_pointer(NodePointer apiObj, ffi.Pointer<wire_NodePointer> wireObj) {
    _api_fill_to_wire_node_pointer(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_payment_hash(PaymentHash apiObj, ffi.Pointer<wire_PaymentHash> wireObj) {
    _api_fill_to_wire_payment_hash(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_public_key(PublicKey apiObj, ffi.Pointer<wire_PublicKey> wireObj) {
    _api_fill_to_wire_public_key(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_chain_data_source_config(ChainDataSourceConfig apiObj, wire_ChainDataSourceConfig wireObj) {
    if (apiObj is ChainDataSourceConfig_Esplora) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ChainDataSourceConfig_Esplora();
      wireObj.kind.ref.Esplora.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_channel_id(ChannelId apiObj, wire_ChannelId wireObj) {
    wireObj.internal = api2wire_u8_array_32(apiObj.internal);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.storage_dir_path = api2wire_String(apiObj.storageDirPath);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.onchain_wallet_sync_interval_secs = api2wire_u64(apiObj.onchainWalletSyncIntervalSecs);
    wireObj.wallet_sync_interval_secs = api2wire_u64(apiObj.walletSyncIntervalSecs);
    wireObj.fee_rate_cache_update_interval_secs = api2wire_u64(apiObj.feeRateCacheUpdateIntervalSecs);
    wireObj.log_level = api2wire_log_level(apiObj.logLevel);
    wireObj.listening_address = api2wire_opt_box_autoadd_net_address(apiObj.listeningAddress);
    wireObj.default_cltv_expiry_delta = api2wire_u32(apiObj.defaultCltvExpiryDelta);
  }

  void _api_fill_to_wire_entropy_source_config(EntropySourceConfig apiObj, wire_EntropySourceConfig wireObj) {
    if (apiObj is EntropySourceConfig_SeedFile) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_EntropySourceConfig_SeedFile();
      wireObj.kind.ref.SeedFile.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_SeedBytes) {
      var pre_field0 = api2wire_u8_array_64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_EntropySourceConfig_SeedBytes();
      wireObj.kind.ref.SeedBytes.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_Bip39Mnemonic) {
      var pre_mnemonic = api2wire_box_autoadd_mnemonic(apiObj.mnemonic);
      var pre_passphrase = api2wire_opt_String(apiObj.passphrase);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_EntropySourceConfig_Bip39Mnemonic();
      wireObj.kind.ref.Bip39Mnemonic.ref.mnemonic = pre_mnemonic;
      wireObj.kind.ref.Bip39Mnemonic.ref.passphrase = pre_passphrase;
      return;
    }
  }

  void _api_fill_to_wire_gossip_source_config(GossipSourceConfig apiObj, wire_GossipSourceConfig wireObj) {
    if (apiObj is GossipSourceConfig_P2PNetwork) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is GossipSourceConfig_RapidGossipSync) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_GossipSourceConfig_RapidGossipSync();
      wireObj.kind.ref.RapidGossipSync.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_invoice(Invoice apiObj, wire_Invoice wireObj) {
    wireObj.internal = api2wire_String(apiObj.internal);
  }

  void _api_fill_to_wire_mnemonic(Mnemonic apiObj, wire_Mnemonic wireObj) {
    wireObj.internal = api2wire_String(apiObj.internal);
  }

  void _api_fill_to_wire_net_address(NetAddress apiObj, wire_NetAddress wireObj) {
    if (apiObj is NetAddress_IPv4) {
      var pre_addr = api2wire_String(apiObj.addr);
      var pre_port = api2wire_u16(apiObj.port);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_NetAddress_IPv4();
      wireObj.kind.ref.IPv4.ref.addr = pre_addr;
      wireObj.kind.ref.IPv4.ref.port = pre_port;
      return;
    }
    if (apiObj is NetAddress_IPv6) {
      var pre_addr = api2wire_String(apiObj.addr);
      var pre_port = api2wire_u16(apiObj.port);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_NetAddress_IPv6();
      wireObj.kind.ref.IPv6.ref.addr = pre_addr;
      wireObj.kind.ref.IPv6.ref.port = pre_port;
      return;
    }
  }

  void _api_fill_to_wire_node_pointer(NodePointer apiObj, wire_NodePointer wireObj) {
    wireObj.field0 = api2wire_MutexArcNodeSqliteStore(apiObj.field0);
  }

  void _api_fill_to_wire_opt_box_autoadd_chain_data_source_config(ChainDataSourceConfig? apiObj, ffi.Pointer<wire_ChainDataSourceConfig> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_chain_data_source_config(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_entropy_source_config(EntropySourceConfig? apiObj, ffi.Pointer<wire_EntropySourceConfig> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_entropy_source_config(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_gossip_source_config(GossipSourceConfig? apiObj, ffi.Pointer<wire_GossipSourceConfig> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_gossip_source_config(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_net_address(NetAddress? apiObj, ffi.Pointer<wire_NetAddress> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_net_address(apiObj, wireObj);
  }

  void _api_fill_to_wire_payment_hash(PaymentHash apiObj, wire_PaymentHash wireObj) {
    wireObj.internal = api2wire_u8_array_32(apiObj.internal);
  }

  void _api_fill_to_wire_public_key(PublicKey apiObj, wire_PublicKey wireObj) {
    wireObj.internal = api2wire_String(apiObj.internal);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLdkNodeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLdkNodeWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLdkNodeWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_build_node(
    int port_,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_ChainDataSourceConfig> chain_data_source_config,
    ffi.Pointer<wire_EntropySourceConfig> entropy_source_config,
    ffi.Pointer<wire_GossipSourceConfig> gossip_source_config,
  ) {
    return _wire_build_node(
      port_,
      config,
      chain_data_source_config,
      entropy_source_config,
      gossip_source_config,
    );
  }

  late final _wire_build_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Config>, ffi.Pointer<wire_ChainDataSourceConfig>, ffi.Pointer<wire_EntropySourceConfig>, ffi.Pointer<wire_GossipSourceConfig>)>>('wire_build_node');
  late final _wire_build_node = _wire_build_nodePtr
      .asFunction<void Function(int, ffi.Pointer<wire_Config>, ffi.Pointer<wire_ChainDataSourceConfig>, ffi.Pointer<wire_EntropySourceConfig>, ffi.Pointer<wire_GossipSourceConfig>)>();

  void wire_start__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_start__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_start__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_start__method__NodePointer');
  late final _wire_start__method__NodePointer = _wire_start__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_stop__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_stop__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_stop__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_stop__method__NodePointer');
  late final _wire_stop__method__NodePointer = _wire_stop__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_event_handled__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_event_handled__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_event_handled__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_event_handled__method__NodePointer');
  late final _wire_event_handled__method__NodePointer = _wire_event_handled__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_next_event__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_next_event__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_next_event__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_next_event__method__NodePointer');
  late final _wire_next_event__method__NodePointer = _wire_next_event__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_wait_until_next_event__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_wait_until_next_event__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_wait_until_next_event__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_wait_until_next_event__method__NodePointer');
  late final _wire_wait_until_next_event__method__NodePointer = _wire_wait_until_next_event__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_node_id__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_node_id__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_node_id__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_node_id__method__NodePointer');
  late final _wire_node_id__method__NodePointer = _wire_node_id__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_listening_address__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_listening_address__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_listening_address__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_listening_address__method__NodePointer');
  late final _wire_listening_address__method__NodePointer = _wire_listening_address__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_new_funding_address__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_new_funding_address__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_new_funding_address__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_new_funding_address__method__NodePointer');
  late final _wire_new_funding_address__method__NodePointer = _wire_new_funding_address__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_on_chain_balance__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_on_chain_balance__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_on_chain_balance__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_on_chain_balance__method__NodePointer');
  late final _wire_on_chain_balance__method__NodePointer = _wire_on_chain_balance__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_send_to_on_chain_address__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Address> address,
    int amount_sats,
  ) {
    return _wire_send_to_on_chain_address__method__NodePointer(
      port_,
      that,
      address,
      amount_sats,
    );
  }

  late final _wire_send_to_on_chain_address__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Address>, ffi.Uint64)>>('wire_send_to_on_chain_address__method__NodePointer');
  late final _wire_send_to_on_chain_address__method__NodePointer =
      _wire_send_to_on_chain_address__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Address>, int)>();

  void wire_send_all_to_on_chain_address__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Address> address,
  ) {
    return _wire_send_all_to_on_chain_address__method__NodePointer(
      port_,
      that,
      address,
    );
  }

  late final _wire_send_all_to_on_chain_address__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Address>)>>('wire_send_all_to_on_chain_address__method__NodePointer');
  late final _wire_send_all_to_on_chain_address__method__NodePointer =
      _wire_send_all_to_on_chain_address__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Address>)>();

  void wire_spendable_onchain_balance_sats__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_spendable_onchain_balance_sats__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_spendable_onchain_balance_sats__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_spendable_onchain_balance_sats__method__NodePointer');
  late final _wire_spendable_onchain_balance_sats__method__NodePointer = _wire_spendable_onchain_balance_sats__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_total_onchain_balance_sats__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_total_onchain_balance_sats__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_total_onchain_balance_sats__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_total_onchain_balance_sats__method__NodePointer');
  late final _wire_total_onchain_balance_sats__method__NodePointer = _wire_total_onchain_balance_sats__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_list_channels__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_list_channels__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_list_channels__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_list_channels__method__NodePointer');
  late final _wire_list_channels__method__NodePointer = _wire_list_channels__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_connect__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PublicKey> node_id,
    ffi.Pointer<wire_NetAddress> address,
    bool permanently,
  ) {
    return _wire_connect__method__NodePointer(
      port_,
      that,
      node_id,
      address,
      permanently,
    );
  }

  late final _wire_connect__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PublicKey>, ffi.Pointer<wire_NetAddress>, ffi.Bool)>>(
          'wire_connect__method__NodePointer');
  late final _wire_connect__method__NodePointer =
      _wire_connect__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PublicKey>, ffi.Pointer<wire_NetAddress>, bool)>();

  void wire_disconnect__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PublicKey> counterparty_node_id,
  ) {
    return _wire_disconnect__method__NodePointer(
      port_,
      that,
      counterparty_node_id,
    );
  }

  late final _wire_disconnect__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PublicKey>)>>('wire_disconnect__method__NodePointer');
  late final _wire_disconnect__method__NodePointer = _wire_disconnect__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PublicKey>)>();

  void wire_connect_open_channel__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_NetAddress> address,
    ffi.Pointer<wire_PublicKey> node_id,
    int channel_amount_sats,
    ffi.Pointer<ffi.Uint64> push_to_counterparty_msat,
    bool announce_channel,
  ) {
    return _wire_connect_open_channel__method__NodePointer(
      port_,
      that,
      address,
      node_id,
      channel_amount_sats,
      push_to_counterparty_msat,
      announce_channel,
    );
  }

  late final _wire_connect_open_channel__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_NetAddress>, ffi.Pointer<wire_PublicKey>, ffi.Uint64, ffi.Pointer<ffi.Uint64>, ffi.Bool)>>(
      'wire_connect_open_channel__method__NodePointer');
  late final _wire_connect_open_channel__method__NodePointer = _wire_connect_open_channel__method__NodePointerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_NetAddress>, ffi.Pointer<wire_PublicKey>, int, ffi.Pointer<ffi.Uint64>, bool)>();

  void wire_sync_wallets__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_sync_wallets__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_sync_wallets__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_sync_wallets__method__NodePointer');
  late final _wire_sync_wallets__method__NodePointer = _wire_sync_wallets__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_close_channel__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_ChannelId> channel_id,
    ffi.Pointer<wire_PublicKey> counterparty_node_id,
  ) {
    return _wire_close_channel__method__NodePointer(
      port_,
      that,
      channel_id,
      counterparty_node_id,
    );
  }

  late final _wire_close_channel__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_ChannelId>, ffi.Pointer<wire_PublicKey>)>>('wire_close_channel__method__NodePointer');
  late final _wire_close_channel__method__NodePointer =
      _wire_close_channel__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_ChannelId>, ffi.Pointer<wire_PublicKey>)>();

  void wire_send_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Invoice> invoice,
  ) {
    return _wire_send_payment__method__NodePointer(
      port_,
      that,
      invoice,
    );
  }

  late final _wire_send_payment__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Invoice>)>>('wire_send_payment__method__NodePointer');
  late final _wire_send_payment__method__NodePointer = _wire_send_payment__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Invoice>)>();

  void wire_send_payment_using_amount__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Invoice> invoice,
    int amount_msat,
  ) {
    return _wire_send_payment_using_amount__method__NodePointer(
      port_,
      that,
      invoice,
      amount_msat,
    );
  }

  late final _wire_send_payment_using_amount__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Invoice>, ffi.Uint64)>>('wire_send_payment_using_amount__method__NodePointer');
  late final _wire_send_payment_using_amount__method__NodePointer =
      _wire_send_payment_using_amount__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Invoice>, int)>();

  void wire_send_spontaneous_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    int amount_msat,
    ffi.Pointer<wire_PublicKey> node_id,
  ) {
    return _wire_send_spontaneous_payment__method__NodePointer(
      port_,
      that,
      amount_msat,
      node_id,
    );
  }

  late final _wire_send_spontaneous_payment__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Uint64, ffi.Pointer<wire_PublicKey>)>>('wire_send_spontaneous_payment__method__NodePointer');
  late final _wire_send_spontaneous_payment__method__NodePointer =
      _wire_send_spontaneous_payment__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, int, ffi.Pointer<wire_PublicKey>)>();

  void wire_receive_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    int amount_msat,
    ffi.Pointer<wire_uint_8_list> description,
    int expiry_secs,
  ) {
    return _wire_receive_payment__method__NodePointer(
      port_,
      that,
      amount_msat,
      description,
      expiry_secs,
    );
  }

  late final _wire_receive_payment__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Uint64, ffi.Pointer<wire_uint_8_list>, ffi.Uint32)>>('wire_receive_payment__method__NodePointer');
  late final _wire_receive_payment__method__NodePointer =
      _wire_receive_payment__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_receive_variable_amount_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_uint_8_list> description,
    int expiry_secs,
  ) {
    return _wire_receive_variable_amount_payment__method__NodePointer(
      port_,
      that,
      description,
      expiry_secs,
    );
  }

  late final _wire_receive_variable_amount_payment__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_uint_8_list>, ffi.Uint32)>>('wire_receive_variable_amount_payment__method__NodePointer');
  late final _wire_receive_variable_amount_payment__method__NodePointer =
      _wire_receive_variable_amount_payment__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PaymentHash> payment_hash,
  ) {
    return _wire_payment__method__NodePointer(
      port_,
      that,
      payment_hash,
    );
  }

  late final _wire_payment__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PaymentHash>)>>('wire_payment__method__NodePointer');
  late final _wire_payment__method__NodePointer = _wire_payment__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PaymentHash>)>();

  void wire_remove_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PaymentHash> payment_hash,
  ) {
    return _wire_remove_payment__method__NodePointer(
      port_,
      that,
      payment_hash,
    );
  }

  late final _wire_remove_payment__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PaymentHash>)>>('wire_remove_payment__method__NodePointer');
  late final _wire_remove_payment__method__NodePointer = _wire_remove_payment__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_PaymentHash>)>();

  void wire_list_payments_with_filter__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    int payment_direction,
  ) {
    return _wire_list_payments_with_filter__method__NodePointer(
      port_,
      that,
      payment_direction,
    );
  }

  late final _wire_list_payments_with_filter__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Int32)>>('wire_list_payments_with_filter__method__NodePointer');
  late final _wire_list_payments_with_filter__method__NodePointer = _wire_list_payments_with_filter__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, int)>();

  void wire_list_payments__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_list_payments__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_list_payments__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_list_payments__method__NodePointer');
  late final _wire_list_payments__method__NodePointer = _wire_list_payments__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_list_peers__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_list_peers__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_list_peers__method__NodePointerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>('wire_list_peers__method__NodePointer');
  late final _wire_list_peers__method__NodePointer = _wire_list_peers__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_sign_message__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_sign_message__method__NodePointer(
      port_,
      that,
      msg,
    );
  }

  late final _wire_sign_message__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_uint_8_list>)>>('wire_sign_message__method__NodePointer');
  late final _wire_sign_message__method__NodePointer = _wire_sign_message__method__NodePointerPtr.asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_verify_signature__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_uint_8_list> msg,
    ffi.Pointer<wire_uint_8_list> sig,
    ffi.Pointer<wire_PublicKey> pkey,
  ) {
    return _wire_verify_signature__method__NodePointer(
      port_,
      that,
      msg,
      sig,
      pkey,
    );
  }

  late final _wire_verify_signature__method__NodePointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_PublicKey>)>>(
          'wire_verify_signature__method__NodePointer');
  late final _wire_verify_signature__method__NodePointer = _wire_verify_signature__method__NodePointerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_PublicKey>)>();

  wire_MutexArcNodeSqliteStore new_MutexArcNodeSqliteStore() {
    return _new_MutexArcNodeSqliteStore();
  }

  late final _new_MutexArcNodeSqliteStorePtr = _lookup<ffi.NativeFunction<wire_MutexArcNodeSqliteStore Function()>>('new_MutexArcNodeSqliteStore');
  late final _new_MutexArcNodeSqliteStore = _new_MutexArcNodeSqliteStorePtr.asFunction<wire_MutexArcNodeSqliteStore Function()>();

  ffi.Pointer<wire_Address> new_box_autoadd_address_0() {
    return _new_box_autoadd_address_0();
  }

  late final _new_box_autoadd_address_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Address> Function()>>('new_box_autoadd_address_0');
  late final _new_box_autoadd_address_0 = _new_box_autoadd_address_0Ptr.asFunction<ffi.Pointer<wire_Address> Function()>();

  ffi.Pointer<wire_ChainDataSourceConfig> new_box_autoadd_chain_data_source_config_0() {
    return _new_box_autoadd_chain_data_source_config_0();
  }

  late final _new_box_autoadd_chain_data_source_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_ChainDataSourceConfig> Function()>>('new_box_autoadd_chain_data_source_config_0');
  late final _new_box_autoadd_chain_data_source_config_0 = _new_box_autoadd_chain_data_source_config_0Ptr.asFunction<ffi.Pointer<wire_ChainDataSourceConfig> Function()>();

  ffi.Pointer<wire_ChannelId> new_box_autoadd_channel_id_0() {
    return _new_box_autoadd_channel_id_0();
  }

  late final _new_box_autoadd_channel_id_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_ChannelId> Function()>>('new_box_autoadd_channel_id_0');
  late final _new_box_autoadd_channel_id_0 = _new_box_autoadd_channel_id_0Ptr.asFunction<ffi.Pointer<wire_ChannelId> Function()>();

  ffi.Pointer<wire_Config> new_box_autoadd_config_0() {
    return _new_box_autoadd_config_0();
  }

  late final _new_box_autoadd_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>('new_box_autoadd_config_0');
  late final _new_box_autoadd_config_0 = _new_box_autoadd_config_0Ptr.asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_EntropySourceConfig> new_box_autoadd_entropy_source_config_0() {
    return _new_box_autoadd_entropy_source_config_0();
  }

  late final _new_box_autoadd_entropy_source_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_EntropySourceConfig> Function()>>('new_box_autoadd_entropy_source_config_0');
  late final _new_box_autoadd_entropy_source_config_0 = _new_box_autoadd_entropy_source_config_0Ptr.asFunction<ffi.Pointer<wire_EntropySourceConfig> Function()>();

  ffi.Pointer<wire_GossipSourceConfig> new_box_autoadd_gossip_source_config_0() {
    return _new_box_autoadd_gossip_source_config_0();
  }

  late final _new_box_autoadd_gossip_source_config_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_GossipSourceConfig> Function()>>('new_box_autoadd_gossip_source_config_0');
  late final _new_box_autoadd_gossip_source_config_0 = _new_box_autoadd_gossip_source_config_0Ptr.asFunction<ffi.Pointer<wire_GossipSourceConfig> Function()>();

  ffi.Pointer<wire_Invoice> new_box_autoadd_invoice_0() {
    return _new_box_autoadd_invoice_0();
  }

  late final _new_box_autoadd_invoice_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Invoice> Function()>>('new_box_autoadd_invoice_0');
  late final _new_box_autoadd_invoice_0 = _new_box_autoadd_invoice_0Ptr.asFunction<ffi.Pointer<wire_Invoice> Function()>();

  ffi.Pointer<wire_Mnemonic> new_box_autoadd_mnemonic_0() {
    return _new_box_autoadd_mnemonic_0();
  }

  late final _new_box_autoadd_mnemonic_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Mnemonic> Function()>>('new_box_autoadd_mnemonic_0');
  late final _new_box_autoadd_mnemonic_0 = _new_box_autoadd_mnemonic_0Ptr.asFunction<ffi.Pointer<wire_Mnemonic> Function()>();

  ffi.Pointer<wire_NetAddress> new_box_autoadd_net_address_0() {
    return _new_box_autoadd_net_address_0();
  }

  late final _new_box_autoadd_net_address_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_NetAddress> Function()>>('new_box_autoadd_net_address_0');
  late final _new_box_autoadd_net_address_0 = _new_box_autoadd_net_address_0Ptr.asFunction<ffi.Pointer<wire_NetAddress> Function()>();

  ffi.Pointer<wire_NodePointer> new_box_autoadd_node_pointer_0() {
    return _new_box_autoadd_node_pointer_0();
  }

  late final _new_box_autoadd_node_pointer_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_NodePointer> Function()>>('new_box_autoadd_node_pointer_0');
  late final _new_box_autoadd_node_pointer_0 = _new_box_autoadd_node_pointer_0Ptr.asFunction<ffi.Pointer<wire_NodePointer> Function()>();

  ffi.Pointer<wire_PaymentHash> new_box_autoadd_payment_hash_0() {
    return _new_box_autoadd_payment_hash_0();
  }

  late final _new_box_autoadd_payment_hash_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_PaymentHash> Function()>>('new_box_autoadd_payment_hash_0');
  late final _new_box_autoadd_payment_hash_0 = _new_box_autoadd_payment_hash_0Ptr.asFunction<ffi.Pointer<wire_PaymentHash> Function()>();

  ffi.Pointer<wire_PublicKey> new_box_autoadd_public_key_0() {
    return _new_box_autoadd_public_key_0();
  }

  late final _new_box_autoadd_public_key_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_PublicKey> Function()>>('new_box_autoadd_public_key_0');
  late final _new_box_autoadd_public_key_0 = _new_box_autoadd_public_key_0Ptr.asFunction<ffi.Pointer<wire_PublicKey> Function()>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>('new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_MutexArcNodeSqliteStore(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexArcNodeSqliteStore(
      ptr,
    );
  }

  late final _drop_opaque_MutexArcNodeSqliteStorePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexArcNodeSqliteStore');
  late final _drop_opaque_MutexArcNodeSqliteStore = _drop_opaque_MutexArcNodeSqliteStorePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexArcNodeSqliteStore(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexArcNodeSqliteStore(
      ptr,
    );
  }

  late final _share_opaque_MutexArcNodeSqliteStorePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexArcNodeSqliteStore');
  late final _share_opaque_MutexArcNodeSqliteStore = _share_opaque_MutexArcNodeSqliteStorePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ChainDataSourceConfigKind> inflate_ChainDataSourceConfig_Esplora() {
    return _inflate_ChainDataSourceConfig_Esplora();
  }

  late final _inflate_ChainDataSourceConfig_EsploraPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ChainDataSourceConfigKind> Function()>>('inflate_ChainDataSourceConfig_Esplora');
  late final _inflate_ChainDataSourceConfig_Esplora = _inflate_ChainDataSourceConfig_EsploraPtr.asFunction<ffi.Pointer<ChainDataSourceConfigKind> Function()>();

  ffi.Pointer<EntropySourceConfigKind> inflate_EntropySourceConfig_SeedFile() {
    return _inflate_EntropySourceConfig_SeedFile();
  }

  late final _inflate_EntropySourceConfig_SeedFilePtr = _lookup<ffi.NativeFunction<ffi.Pointer<EntropySourceConfigKind> Function()>>('inflate_EntropySourceConfig_SeedFile');
  late final _inflate_EntropySourceConfig_SeedFile = _inflate_EntropySourceConfig_SeedFilePtr.asFunction<ffi.Pointer<EntropySourceConfigKind> Function()>();

  ffi.Pointer<EntropySourceConfigKind> inflate_EntropySourceConfig_SeedBytes() {
    return _inflate_EntropySourceConfig_SeedBytes();
  }

  late final _inflate_EntropySourceConfig_SeedBytesPtr = _lookup<ffi.NativeFunction<ffi.Pointer<EntropySourceConfigKind> Function()>>('inflate_EntropySourceConfig_SeedBytes');
  late final _inflate_EntropySourceConfig_SeedBytes = _inflate_EntropySourceConfig_SeedBytesPtr.asFunction<ffi.Pointer<EntropySourceConfigKind> Function()>();

  ffi.Pointer<EntropySourceConfigKind> inflate_EntropySourceConfig_Bip39Mnemonic() {
    return _inflate_EntropySourceConfig_Bip39Mnemonic();
  }

  late final _inflate_EntropySourceConfig_Bip39MnemonicPtr = _lookup<ffi.NativeFunction<ffi.Pointer<EntropySourceConfigKind> Function()>>('inflate_EntropySourceConfig_Bip39Mnemonic');
  late final _inflate_EntropySourceConfig_Bip39Mnemonic = _inflate_EntropySourceConfig_Bip39MnemonicPtr.asFunction<ffi.Pointer<EntropySourceConfigKind> Function()>();

  ffi.Pointer<GossipSourceConfigKind> inflate_GossipSourceConfig_RapidGossipSync() {
    return _inflate_GossipSourceConfig_RapidGossipSync();
  }

  late final _inflate_GossipSourceConfig_RapidGossipSyncPtr = _lookup<ffi.NativeFunction<ffi.Pointer<GossipSourceConfigKind> Function()>>('inflate_GossipSourceConfig_RapidGossipSync');
  late final _inflate_GossipSourceConfig_RapidGossipSync = _inflate_GossipSourceConfig_RapidGossipSyncPtr.asFunction<ffi.Pointer<GossipSourceConfigKind> Function()>();

  ffi.Pointer<NetAddressKind> inflate_NetAddress_IPv4() {
    return _inflate_NetAddress_IPv4();
  }

  late final _inflate_NetAddress_IPv4Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<NetAddressKind> Function()>>('inflate_NetAddress_IPv4');
  late final _inflate_NetAddress_IPv4 = _inflate_NetAddress_IPv4Ptr.asFunction<ffi.Pointer<NetAddressKind> Function()>();

  ffi.Pointer<NetAddressKind> inflate_NetAddress_IPv6() {
    return _inflate_NetAddress_IPv6();
  }

  late final _inflate_NetAddress_IPv6Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<NetAddressKind> Function()>>('inflate_NetAddress_IPv6');
  late final _inflate_NetAddress_IPv6 = _inflate_NetAddress_IPv6Ptr.asFunction<ffi.Pointer<NetAddressKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_NetAddress_IPv4 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> addr;

  @ffi.Uint16()
  external int port;
}

final class wire_NetAddress_IPv6 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> addr;

  @ffi.Uint16()
  external int port;
}

final class NetAddressKind extends ffi.Union {
  external ffi.Pointer<wire_NetAddress_IPv4> IPv4;

  external ffi.Pointer<wire_NetAddress_IPv6> IPv6;
}

final class wire_NetAddress extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<NetAddressKind> kind;
}

final class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> storage_dir_path;

  @ffi.Int32()
  external int network;

  @ffi.Uint64()
  external int onchain_wallet_sync_interval_secs;

  @ffi.Uint64()
  external int wallet_sync_interval_secs;

  @ffi.Uint64()
  external int fee_rate_cache_update_interval_secs;

  @ffi.Int32()
  external int log_level;

  external ffi.Pointer<wire_NetAddress> listening_address;

  @ffi.Uint32()
  external int default_cltv_expiry_delta;
}

final class wire_ChainDataSourceConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class ChainDataSourceConfigKind extends ffi.Union {
  external ffi.Pointer<wire_ChainDataSourceConfig_Esplora> Esplora;
}

final class wire_ChainDataSourceConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ChainDataSourceConfigKind> kind;
}

final class wire_EntropySourceConfig_SeedFile extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_EntropySourceConfig_SeedBytes extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_Mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

final class wire_EntropySourceConfig_Bip39Mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_Mnemonic> mnemonic;

  external ffi.Pointer<wire_uint_8_list> passphrase;
}

final class EntropySourceConfigKind extends ffi.Union {
  external ffi.Pointer<wire_EntropySourceConfig_SeedFile> SeedFile;

  external ffi.Pointer<wire_EntropySourceConfig_SeedBytes> SeedBytes;

  external ffi.Pointer<wire_EntropySourceConfig_Bip39Mnemonic> Bip39Mnemonic;
}

final class wire_EntropySourceConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<EntropySourceConfigKind> kind;
}

final class wire_GossipSourceConfig_P2PNetwork extends ffi.Opaque {}

final class wire_GossipSourceConfig_RapidGossipSync extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class GossipSourceConfigKind extends ffi.Union {
  external ffi.Pointer<wire_GossipSourceConfig_P2PNetwork> P2PNetwork;

  external ffi.Pointer<wire_GossipSourceConfig_RapidGossipSync> RapidGossipSync;
}

final class wire_GossipSourceConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<GossipSourceConfigKind> kind;
}

final class wire_MutexArcNodeSqliteStore extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_NodePointer extends ffi.Struct {
  external wire_MutexArcNodeSqliteStore field0;
}

final class wire_Address extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

final class wire_PublicKey extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

final class wire_ChannelId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

final class wire_Invoice extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

final class wire_PaymentHash extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
