// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.58.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:collection/collection.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class Native {
  Future<LdkLiteInstance> initBuilder({required LdkConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitBuilderConstMeta;

  Future<String> start({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartConstMeta;

  Future<Balance> getBalance({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBalanceConstMeta;

  Future<String> newFundingAddress({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewFundingAddressConstMeta;

  Future<void> sync({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncConstMeta;

  Future<String> getNodeAddr({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNodeAddrConstMeta;

  Future<void> nextEvent({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNextEventConstMeta;

  Future<void> handleEvent({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHandleEventConstMeta;

  Future<String> receivePayment(
      {required LdkLiteInstance ldkLiteInstance,
      int? amountMsat,
      required String description,
      required int expirySecs,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta;

  Future<String> sendPayment({required LdkLiteInstance ldkLiteInstance, required String invoice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta;

  Future<U8Array32> getChannelId({required LdkLiteInstance ldkLiteInstance, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetChannelIdConstMeta;

  Future<void> connectOpenChannel(
      {required LdkLiteInstance ldkLite,
      required String nodePubkeyAndAddress,
      required int channelAmountSats,
      required bool announceChannel,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectOpenChannelConstMeta;

  Future<void> closeChannel(
      {required LdkLiteInstance ldkLite,
      required U8Array32 channelId,
      required String counterpartyNodeId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseChannelConstMeta;

  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;

  Future<void> rustSetUp({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRustSetUpConstMeta;

  DropFnType get dropOpaqueLdkLiteInstance;
  ShareFnType get shareOpaqueLdkLiteInstance;
  OpaqueTypeFinalizer get LdkLiteInstanceFinalizer;
}

@sealed
class LdkLiteInstance extends FrbOpaque {
  final Native bridge;
  LdkLiteInstance.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueLdkLiteInstance;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueLdkLiteInstance;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.LdkLiteInstanceFinalizer;
}

class Balance {
  final int total;
  final int immature;
  final int trustedPending;
  final int untrustedPending;
  final int confirmed;

  Balance({
    required this.total,
    required this.immature,
    required this.trustedPending,
    required this.untrustedPending,
    required this.confirmed,
  });
}

class LdkConfig {
  /// The path where the underlying LDK and BDK persist their data.
  final String storageDirPath;

  /// The URL of the utilized Esplora server. default 'https://blockstream.info/api'
  final String esploraServerUrl;

  /// The used Bitcoin network.
  final Network network;

  /// The IP address and TCP port the node will listen on.
  final String? listeningAddress;

  /// The default CLTV expiry delta to be used for payments.
  final int defaultCltvExpiryDelta;

  LdkConfig({
    required this.storageDirPath,
    required this.esploraServerUrl,
    required this.network,
    this.listeningAddress,
    required this.defaultCltvExpiryDelta,
  });
}

class LogEntry {
  final int timeMillis;
  final int level;
  final String tag;
  final String msg;

  LogEntry({
    required this.timeMillis,
    required this.level,
    required this.tag,
    required this.msg,
  });
}

enum Network {
  ///Classic Bitcoin
  Bitcoin,

  ///Bitcoin’s testnet
  Testnet,

  ///Bitcoin’s signet
  Signet,

  ///Bitcoin’s regtest
  Regtest,
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) => NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) => NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<LdkLiteInstance> initBuilder({required LdkConfig config, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ldk_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_builder(port_, arg0),
      parseSuccessData: _wire2api_LdkLiteInstance,
      constMeta: kInitBuilderConstMeta,
      argValues: [config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitBuilderConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "init_builder",
        argNames: ["config"],
      );

  Future<String> start({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kStartConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "start",
        argNames: ["ldkLiteInstance"],
      );

  Future<Balance> getBalance({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_balance(port_, arg0),
      parseSuccessData: _wire2api_balance,
      constMeta: kGetBalanceConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBalanceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_balance",
        argNames: ["ldkLiteInstance"],
      );

  Future<String> newFundingAddress({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_funding_address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kNewFundingAddressConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewFundingAddressConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_funding_address",
        argNames: ["ldkLiteInstance"],
      );

  Future<void> sync({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSyncConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync",
        argNames: ["ldkLiteInstance"],
      );

  Future<String> getNodeAddr({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_node_addr(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetNodeAddrConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetNodeAddrConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_node_addr",
        argNames: ["ldkLiteInstance"],
      );

  Future<void> nextEvent({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_next_event(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kNextEventConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNextEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "next_event",
        argNames: ["ldkLiteInstance"],
      );

  Future<void> handleEvent({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_event(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kHandleEventConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleEventConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_event",
        argNames: ["ldkLiteInstance"],
      );

  Future<String> receivePayment(
      {required LdkLiteInstance ldkLiteInstance,
      int? amountMsat,
      required String description,
      required int expirySecs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    var arg1 = _platform.api2wire_opt_box_autoadd_u64(amountMsat);
    var arg2 = _platform.api2wire_String(description);
    var arg3 = api2wire_u32(expirySecs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_payment(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kReceivePaymentConstMeta,
      argValues: [ldkLiteInstance, amountMsat, description, expirySecs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_payment",
        argNames: ["ldkLiteInstance", "amountMsat", "description", "expirySecs"],
      );

  Future<String> sendPayment({required LdkLiteInstance ldkLiteInstance, required String invoice, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    var arg1 = _platform.api2wire_String(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_payment(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSendPaymentConstMeta,
      argValues: [ldkLiteInstance, invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment",
        argNames: ["ldkLiteInstance", "invoice"],
      );

  Future<U8Array32> getChannelId({required LdkLiteInstance ldkLiteInstance, dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLiteInstance);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_channel_id(port_, arg0),
      parseSuccessData: _wire2api_u8_array_32,
      constMeta: kGetChannelIdConstMeta,
      argValues: [ldkLiteInstance],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetChannelIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_channel_id",
        argNames: ["ldkLiteInstance"],
      );

  Future<void> connectOpenChannel(
      {required LdkLiteInstance ldkLite,
      required String nodePubkeyAndAddress,
      required int channelAmountSats,
      required bool announceChannel,
      dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLite);
    var arg1 = _platform.api2wire_String(nodePubkeyAndAddress);
    var arg2 = _platform.api2wire_u64(channelAmountSats);
    var arg3 = announceChannel;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_open_channel(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectOpenChannelConstMeta,
      argValues: [ldkLite, nodePubkeyAndAddress, channelAmountSats, announceChannel],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectOpenChannelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_open_channel",
        argNames: ["ldkLite", "nodePubkeyAndAddress", "channelAmountSats", "announceChannel"],
      );

  Future<void> closeChannel(
      {required LdkLiteInstance ldkLite,
      required U8Array32 channelId,
      required String counterpartyNodeId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_LdkLiteInstance(ldkLite);
    var arg1 = _platform.api2wire_u8_array_32(channelId);
    var arg2 = _platform.api2wire_String(counterpartyNodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_channel(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kCloseChannelConstMeta,
      argValues: [ldkLite, channelId, counterpartyNodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseChannelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_channel",
        argNames: ["ldkLite", "channelId", "counterpartyNodeId"],
      );

  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  Future<void> rustSetUp({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_set_up(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kRustSetUpConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustSetUpConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_set_up",
        argNames: [],
      );

  DropFnType get dropOpaqueLdkLiteInstance => _platform.inner.drop_opaque_LdkLiteInstance;
  ShareFnType get shareOpaqueLdkLiteInstance => _platform.inner.share_opaque_LdkLiteInstance;
  OpaqueTypeFinalizer get LdkLiteInstanceFinalizer => _platform.LdkLiteInstanceFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  LdkLiteInstance _wire2api_LdkLiteInstance(dynamic raw) {
    return LdkLiteInstance.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Balance _wire2api_balance(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Balance(
      total: _wire2api_u64(arr[0]),
      immature: _wire2api_u64(arr[1]),
      trustedPending: _wire2api_u64(arr[2]),
      untrustedPending: _wire2api_u64(arr[3]),
      confirmed: _wire2api_u64(arr[4]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: _wire2api_i64(arr[0]),
      level: _wire2api_i32(arr[1]),
      tag: _wire2api_String(arr[2]),
      msg: _wire2api_String(arr[3]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  wire_LdkLiteInstance api2wire_LdkLiteInstance(LdkLiteInstance raw) {
    final ptr = inner.new_LdkLiteInstance();
    _api_fill_to_wire_LdkLiteInstance(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_LdkConfig> api2wire_box_autoadd_ldk_config(LdkConfig raw) {
    final ptr = inner.new_box_autoadd_ldk_config_0();
    _api_fill_to_wire_ldk_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_32(U8Array32 raw) {
    final ans = inner.new_uint_8_list_0(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _LdkLiteInstanceFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_LdkLiteInstancePtr);
  OpaqueTypeFinalizer get LdkLiteInstanceFinalizer => _LdkLiteInstanceFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_LdkLiteInstance(LdkLiteInstance apiObj, wire_LdkLiteInstance wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_ldk_config(LdkConfig apiObj, ffi.Pointer<wire_LdkConfig> wireObj) {
    _api_fill_to_wire_ldk_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_ldk_config(LdkConfig apiObj, wire_LdkConfig wireObj) {
    wireObj.storage_dir_path = api2wire_String(apiObj.storageDirPath);
    wireObj.esplora_server_url = api2wire_String(apiObj.esploraServerUrl);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.listening_address = api2wire_opt_String(apiObj.listeningAddress);
    wireObj.default_cltv_expiry_delta = api2wire_u32(apiObj.defaultCltvExpiryDelta);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init_builder(
    int port_,
    ffi.Pointer<wire_LdkConfig> config,
  ) {
    return _wire_init_builder(
      port_,
      config,
    );
  }

  late final _wire_init_builderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LdkConfig>)>>('wire_init_builder');
  late final _wire_init_builder = _wire_init_builderPtr.asFunction<void Function(int, ffi.Pointer<wire_LdkConfig>)>();

  void wire_start(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_start(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_start');
  late final _wire_start = _wire_startPtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_get_balance(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_get_balance(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_get_balancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_get_balance');
  late final _wire_get_balance = _wire_get_balancePtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_new_funding_address(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_new_funding_address(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_new_funding_addressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_new_funding_address');
  late final _wire_new_funding_address =
      _wire_new_funding_addressPtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_sync(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_sync(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_syncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_sync');
  late final _wire_sync = _wire_syncPtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_get_node_addr(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_get_node_addr(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_get_node_addrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_get_node_addr');
  late final _wire_get_node_addr = _wire_get_node_addrPtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_next_event(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_next_event(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_next_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_next_event');
  late final _wire_next_event = _wire_next_eventPtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_handle_event(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_handle_event(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_handle_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_handle_event');
  late final _wire_handle_event = _wire_handle_eventPtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_receive_payment(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
    ffi.Pointer<ffi.Uint64> amount_msat,
    ffi.Pointer<wire_uint_8_list> description,
    int expiry_secs,
  ) {
    return _wire_receive_payment(
      port_,
      ldk_lite_instance,
      amount_msat,
      description,
      expiry_secs,
    );
  }

  late final _wire_receive_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_LdkLiteInstance, ffi.Pointer<ffi.Uint64>, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_receive_payment');
  late final _wire_receive_payment = _wire_receive_paymentPtr.asFunction<
      void Function(int, wire_LdkLiteInstance, ffi.Pointer<ffi.Uint64>, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_send_payment(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_send_payment(
      port_,
      ldk_lite_instance,
      invoice,
    );
  }

  late final _wire_send_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_send_payment');
  late final _wire_send_payment =
      _wire_send_paymentPtr.asFunction<void Function(int, wire_LdkLiteInstance, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_channel_id(
    int port_,
    wire_LdkLiteInstance ldk_lite_instance,
  ) {
    return _wire_get_channel_id(
      port_,
      ldk_lite_instance,
    );
  }

  late final _wire_get_channel_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LdkLiteInstance)>>('wire_get_channel_id');
  late final _wire_get_channel_id = _wire_get_channel_idPtr.asFunction<void Function(int, wire_LdkLiteInstance)>();

  void wire_connect_open_channel(
    int port_,
    wire_LdkLiteInstance ldk_lite,
    ffi.Pointer<wire_uint_8_list> node_pubkey_and_address,
    int channel_amount_sats,
    bool announce_channel,
  ) {
    return _wire_connect_open_channel(
      port_,
      ldk_lite,
      node_pubkey_and_address,
      channel_amount_sats,
      announce_channel,
    );
  }

  late final _wire_connect_open_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_LdkLiteInstance, ffi.Pointer<wire_uint_8_list>, ffi.Uint64,
              ffi.Bool)>>('wire_connect_open_channel');
  late final _wire_connect_open_channel = _wire_connect_open_channelPtr
      .asFunction<void Function(int, wire_LdkLiteInstance, ffi.Pointer<wire_uint_8_list>, int, bool)>();

  void wire_close_channel(
    int port_,
    wire_LdkLiteInstance ldk_lite,
    ffi.Pointer<wire_uint_8_list> channel_id,
    ffi.Pointer<wire_uint_8_list> counterparty_node_id,
  ) {
    return _wire_close_channel(
      port_,
      ldk_lite,
      channel_id,
      counterparty_node_id,
    );
  }

  late final _wire_close_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_LdkLiteInstance, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_close_channel');
  late final _wire_close_channel = _wire_close_channelPtr.asFunction<
      void Function(int, wire_LdkLiteInstance, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_log_stream');
  late final _wire_create_log_stream = _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_rust_set_up(
    int port_,
  ) {
    return _wire_rust_set_up(
      port_,
    );
  }

  late final _wire_rust_set_upPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_rust_set_up');
  late final _wire_rust_set_up = _wire_rust_set_upPtr.asFunction<void Function(int)>();

  wire_LdkLiteInstance new_LdkLiteInstance() {
    return _new_LdkLiteInstance();
  }

  late final _new_LdkLiteInstancePtr =
      _lookup<ffi.NativeFunction<wire_LdkLiteInstance Function()>>('new_LdkLiteInstance');
  late final _new_LdkLiteInstance = _new_LdkLiteInstancePtr.asFunction<wire_LdkLiteInstance Function()>();

  ffi.Pointer<wire_LdkConfig> new_box_autoadd_ldk_config_0() {
    return _new_box_autoadd_ldk_config_0();
  }

  late final _new_box_autoadd_ldk_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LdkConfig> Function()>>('new_box_autoadd_ldk_config_0');
  late final _new_box_autoadd_ldk_config_0 =
      _new_box_autoadd_ldk_config_0Ptr.asFunction<ffi.Pointer<wire_LdkConfig> Function()>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>('new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_LdkLiteInstance(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_LdkLiteInstance(
      ptr,
    );
  }

  late final _drop_opaque_LdkLiteInstancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_LdkLiteInstance');
  late final _drop_opaque_LdkLiteInstance =
      _drop_opaque_LdkLiteInstancePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_LdkLiteInstance(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_LdkLiteInstance(
      ptr,
    );
  }

  late final _share_opaque_LdkLiteInstancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          'share_opaque_LdkLiteInstance');
  late final _share_opaque_LdkLiteInstance =
      _share_opaque_LdkLiteInstancePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_LdkConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> storage_dir_path;

  external ffi.Pointer<wire_uint_8_list> esplora_server_url;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_uint_8_list> listening_address;

  @ffi.Uint32()
  external int default_cltv_expiry_delta;
}

class wire_LdkLiteInstance extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
