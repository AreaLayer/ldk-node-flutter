// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class LdknodeImpl implements Ldknode {
  final LdknodePlatform _platform;
  factory LdknodeImpl(ExternalLibrary dylib) =>
      LdknodeImpl.raw(LdknodePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory LdknodeImpl.wasm(FutureOr<WasmModule> module) =>
      LdknodeImpl(module as ExternalLibrary);
  LdknodeImpl.raw(this._platform);
  Future<SocketAddress> fromStrStaticMethodSocketAddress(
      {required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_from_str__static_method__SocketAddress(port_, arg0),
      parseSuccessData: _wire2api_socket_address,
      parseErrorData: _wire2api_builder_exception,
      constMeta: kFromStrStaticMethodSocketAddressConstMeta,
      argValues: [address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFromStrStaticMethodSocketAddressConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "from_str__static_method__SocketAddress",
            argNames: ["address"],
          );

  Future<String> toStringMethodSocketAddress(
      {required SocketAddress that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_socket_address(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_to_string__method__SocketAddress(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kToStringMethodSocketAddressConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToStringMethodSocketAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_string__method__SocketAddress",
        argNames: ["that"],
      );

  Future<Mnemonic> generateStaticMethodMnemonic({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_generate__static_method__Mnemonic(port_),
      parseSuccessData: (d) => _wire2api_mnemonic(d),
      parseErrorData: null,
      constMeta: kGenerateStaticMethodMnemonicConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateStaticMethodMnemonicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate__static_method__Mnemonic",
        argNames: [],
      );

  Future<NodePointer> finalizeBuilderMethodLdkBuilder(
      {required LdkBuilder that,
      required Config config,
      ChainDataSourceConfig? chainDataSourceConfig,
      EntropySourceConfig? entropySourceConfig,
      GossipSourceConfig? gossipSourceConfig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ldk_builder(that);
    var arg1 = _platform.api2wire_box_autoadd_config(config);
    var arg2 = _platform.api2wire_opt_box_autoadd_chain_data_source_config(
        chainDataSourceConfig);
    var arg3 = _platform
        .api2wire_opt_box_autoadd_entropy_source_config(entropySourceConfig);
    var arg4 = _platform
        .api2wire_opt_box_autoadd_gossip_source_config(gossipSourceConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_finalize_builder__method__LdkBuilder(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: (d) => _wire2api_node_pointer(d),
      parseErrorData: _wire2api_builder_exception,
      constMeta: kFinalizeBuilderMethodLdkBuilderConstMeta,
      argValues: [
        that,
        config,
        chainDataSourceConfig,
        entropySourceConfig,
        gossipSourceConfig
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFinalizeBuilderMethodLdkBuilderConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "finalize_builder__method__LdkBuilder",
            argNames: [
              "that",
              "config",
              "chainDataSourceConfig",
              "entropySourceConfig",
              "gossipSourceConfig"
            ],
          );

  Future<void> startMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_start__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kStartMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> stopMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_stop__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kStopMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> eventHandledMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_event_handled__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kEventHandledMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEventHandledMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "event_handled__method__NodePointer",
        argNames: ["that"],
      );

  Future<Event?> nextEventMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_next_event__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_event,
      parseErrorData: null,
      constMeta: kNextEventMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNextEventMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "next_event__method__NodePointer",
        argNames: ["that"],
      );

  Future<Event> waitUntilNextEventMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_wait_until_next_event__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_event,
      parseErrorData: null,
      constMeta: kWaitUntilNextEventMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWaitUntilNextEventMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "wait_until_next_event__method__NodePointer",
            argNames: ["that"],
          );

  Future<PublicKey> nodeIdMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_node_id__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_public_key,
      parseErrorData: null,
      constMeta: kNodeIdMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNodeIdMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "node_id__method__NodePointer",
        argNames: ["that"],
      );

  Future<List<SocketAddress>?> listeningAddressesMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_listening_addresses__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_opt_list_socket_address,
      parseErrorData: null,
      constMeta: kListeningAddressesMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kListeningAddressesMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "listening_addresses__method__NodePointer",
            argNames: ["that"],
          );

  Future<Address> newOnchainAddressMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_onchain_address__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_address,
      parseErrorData: _wire2api_node_exception,
      constMeta: kNewOnchainAddressMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewOnchainAddressMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_onchain_address__method__NodePointer",
            argNames: ["that"],
          );

  Future<int> spendableOnchainBalanceSatsMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_spendable_onchain_balance_sats__method__NodePointer(
              port_, arg0),
      parseSuccessData: _wire2api_u64,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSpendableOnchainBalanceSatsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSpendableOnchainBalanceSatsMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "spendable_onchain_balance_sats__method__NodePointer",
            argNames: ["that"],
          );

  Future<int> totalOnchainBalanceSatsMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_total_onchain_balance_sats__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_u64,
      parseErrorData: _wire2api_node_exception,
      constMeta: kTotalOnchainBalanceSatsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kTotalOnchainBalanceSatsMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "total_onchain_balance_sats__method__NodePointer",
            argNames: ["that"],
          );

  Future<Txid> sendToOnchainAddressMethodNodePointer(
      {required NodePointer that,
      required Address address,
      required int amountSats,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_address(address);
    var arg2 = _platform.api2wire_u64(amountSats);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_to_onchain_address__method__NodePointer(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_txid,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSendToOnchainAddressMethodNodePointerConstMeta,
      argValues: [that, address, amountSats],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendToOnchainAddressMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send_to_onchain_address__method__NodePointer",
            argNames: ["that", "address", "amountSats"],
          );

  Future<Txid> sendAllToOnchainAddressMethodNodePointer(
      {required NodePointer that, required Address address, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_address(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_all_to_onchain_address__method__NodePointer(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_txid,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSendAllToOnchainAddressMethodNodePointerConstMeta,
      argValues: [that, address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendAllToOnchainAddressMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send_all_to_onchain_address__method__NodePointer",
            argNames: ["that", "address"],
          );

  Future<List<ChannelDetails>> listChannelsMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_list_channels__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_list_channel_details,
      parseErrorData: null,
      constMeta: kListChannelsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListChannelsMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_channels__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> connectMethodNodePointer(
      {required NodePointer that,
      required PublicKey nodeId,
      required SocketAddress address,
      required bool persist,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_public_key(nodeId);
    var arg2 = _platform.api2wire_box_autoadd_socket_address(address);
    var arg3 = persist;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_connect__method__NodePointer(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kConnectMethodNodePointerConstMeta,
      argValues: [that, nodeId, address, persist],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect__method__NodePointer",
        argNames: ["that", "nodeId", "address", "persist"],
      );

  Future<void> disconnectMethodNodePointer(
      {required NodePointer that,
      required PublicKey counterpartyNodeId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_public_key(counterpartyNodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_disconnect__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kDisconnectMethodNodePointerConstMeta,
      argValues: [that, counterpartyNodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect__method__NodePointer",
        argNames: ["that", "counterpartyNodeId"],
      );

  Future<void> connectOpenChannelMethodNodePointer(
      {required NodePointer that,
      required SocketAddress address,
      required PublicKey nodeId,
      required int channelAmountSats,
      int? pushToCounterpartyMsat,
      required bool announceChannel,
      ChannelConfig? channelConfig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_socket_address(address);
    var arg2 = _platform.api2wire_box_autoadd_public_key(nodeId);
    var arg3 = _platform.api2wire_u64(channelAmountSats);
    var arg4 = _platform.api2wire_opt_box_autoadd_u64(pushToCounterpartyMsat);
    var arg5 = announceChannel;
    var arg6 = _platform.api2wire_opt_box_autoadd_channel_config(channelConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_connect_open_channel__method__NodePointer(
              port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kConnectOpenChannelMethodNodePointerConstMeta,
      argValues: [
        that,
        address,
        nodeId,
        channelAmountSats,
        pushToCounterpartyMsat,
        announceChannel,
        channelConfig
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConnectOpenChannelMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "connect_open_channel__method__NodePointer",
            argNames: [
              "that",
              "address",
              "nodeId",
              "channelAmountSats",
              "pushToCounterpartyMsat",
              "announceChannel",
              "channelConfig"
            ],
          );

  Future<void> syncWalletsMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sync_wallets__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSyncWalletsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncWalletsMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_wallets__method__NodePointer",
        argNames: ["that"],
      );

  Future<void> closeChannelMethodNodePointer(
      {required NodePointer that,
      required ChannelId channelId,
      required PublicKey counterpartyNodeId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_channel_id(channelId);
    var arg2 = _platform.api2wire_box_autoadd_public_key(counterpartyNodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_close_channel__method__NodePointer(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kCloseChannelMethodNodePointerConstMeta,
      argValues: [that, channelId, counterpartyNodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseChannelMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "close_channel__method__NodePointer",
        argNames: ["that", "channelId", "counterpartyNodeId"],
      );

  Future<void> updateChannelConfigMethodNodePointer(
      {required NodePointer that,
      required ChannelId channelId,
      required PublicKey counterpartyNodeId,
      required ChannelConfig channelConfig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_channel_id(channelId);
    var arg2 = _platform.api2wire_box_autoadd_public_key(counterpartyNodeId);
    var arg3 = _platform.api2wire_box_autoadd_channel_config(channelConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_update_channel_config__method__NodePointer(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kUpdateChannelConfigMethodNodePointerConstMeta,
      argValues: [that, channelId, counterpartyNodeId, channelConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kUpdateChannelConfigMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "update_channel_config__method__NodePointer",
            argNames: [
              "that",
              "channelId",
              "counterpartyNodeId",
              "channelConfig"
            ],
          );

  Future<PaymentHash> sendPaymentMethodNodePointer(
      {required NodePointer that,
      required Bolt11Invoice invoice,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_bolt_11_invoice(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_payment__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_payment_hash,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSendPaymentMethodNodePointerConstMeta,
      argValues: [that, invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendPaymentMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment__method__NodePointer",
        argNames: ["that", "invoice"],
      );

  Future<PaymentHash> sendPaymentUsingAmountMethodNodePointer(
      {required NodePointer that,
      required Bolt11Invoice invoice,
      required int amountMsat,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_bolt_11_invoice(invoice);
    var arg2 = _platform.api2wire_u64(amountMsat);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_payment_using_amount__method__NodePointer(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_payment_hash,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSendPaymentUsingAmountMethodNodePointerConstMeta,
      argValues: [that, invoice, amountMsat],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendPaymentUsingAmountMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send_payment_using_amount__method__NodePointer",
            argNames: ["that", "invoice", "amountMsat"],
          );

  Future<PaymentHash> sendSpontaneousPaymentMethodNodePointer(
      {required NodePointer that,
      required int amountMsat,
      required PublicKey nodeId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_u64(amountMsat);
    var arg2 = _platform.api2wire_box_autoadd_public_key(nodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_spontaneous_payment__method__NodePointer(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_payment_hash,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSendSpontaneousPaymentMethodNodePointerConstMeta,
      argValues: [that, amountMsat, nodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendSpontaneousPaymentMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send_spontaneous_payment__method__NodePointer",
            argNames: ["that", "amountMsat", "nodeId"],
          );

  Future<void> sendPaymentProbesMethodNodePointer(
      {required NodePointer that,
      required Bolt11Invoice invoice,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_bolt_11_invoice(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_payment_probes__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSendPaymentProbesMethodNodePointerConstMeta,
      argValues: [that, invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendPaymentProbesMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send_payment_probes__method__NodePointer",
            argNames: ["that", "invoice"],
          );

  Future<void> sendSpontaneousPaymentProbesMethodNodePointer(
      {required NodePointer that,
      required int amountMsat,
      required PublicKey nodeId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_u64(amountMsat);
    var arg2 = _platform.api2wire_box_autoadd_public_key(nodeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_spontaneous_payment_probes__method__NodePointer(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSendSpontaneousPaymentProbesMethodNodePointerConstMeta,
      argValues: [that, amountMsat, nodeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendSpontaneousPaymentProbesMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send_spontaneous_payment_probes__method__NodePointer",
            argNames: ["that", "amountMsat", "nodeId"],
          );

  Future<Bolt11Invoice> receivePaymentMethodNodePointer(
      {required NodePointer that,
      required int amountMsat,
      required String description,
      required int expirySecs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_u64(amountMsat);
    var arg2 = _platform.api2wire_String(description);
    var arg3 = api2wire_u32(expirySecs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_receive_payment__method__NodePointer(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bolt_11_invoice,
      parseErrorData: _wire2api_node_exception,
      constMeta: kReceivePaymentMethodNodePointerConstMeta,
      argValues: [that, amountMsat, description, expirySecs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReceivePaymentMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "receive_payment__method__NodePointer",
            argNames: ["that", "amountMsat", "description", "expirySecs"],
          );

  Future<Bolt11Invoice> receiveVariableAmountPaymentMethodNodePointer(
      {required NodePointer that,
      required String description,
      required int expirySecs,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_String(description);
    var arg2 = api2wire_u32(expirySecs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_receive_variable_amount_payment__method__NodePointer(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bolt_11_invoice,
      parseErrorData: _wire2api_node_exception,
      constMeta: kReceiveVariableAmountPaymentMethodNodePointerConstMeta,
      argValues: [that, description, expirySecs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReceiveVariableAmountPaymentMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "receive_variable_amount_payment__method__NodePointer",
            argNames: ["that", "description", "expirySecs"],
          );

  Future<PaymentDetails?> paymentMethodNodePointer(
      {required NodePointer that,
      required PaymentHash paymentHash,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_payment_hash(paymentHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_payment__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_payment_details,
      parseErrorData: null,
      constMeta: kPaymentMethodNodePointerConstMeta,
      argValues: [that, paymentHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPaymentMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "payment__method__NodePointer",
        argNames: ["that", "paymentHash"],
      );

  Future<void> removePaymentMethodNodePointer(
      {required NodePointer that,
      required PaymentHash paymentHash,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_box_autoadd_payment_hash(paymentHash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_remove_payment__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_node_exception,
      constMeta: kRemovePaymentMethodNodePointerConstMeta,
      argValues: [that, paymentHash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemovePaymentMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_payment__method__NodePointer",
        argNames: ["that", "paymentHash"],
      );

  Future<List<PaymentDetails>> listPaymentsWithFilterMethodNodePointer(
      {required NodePointer that,
      required PaymentDirection paymentDirection,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = api2wire_payment_direction(paymentDirection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_list_payments_with_filter__method__NodePointer(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_list_payment_details,
      parseErrorData: null,
      constMeta: kListPaymentsWithFilterMethodNodePointerConstMeta,
      argValues: [that, paymentDirection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kListPaymentsWithFilterMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "list_payments_with_filter__method__NodePointer",
            argNames: ["that", "paymentDirection"],
          );

  Future<List<PaymentDetails>> listPaymentsMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_list_payments__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_list_payment_details,
      parseErrorData: null,
      constMeta: kListPaymentsMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPaymentsMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_payments__method__NodePointer",
        argNames: ["that"],
      );

  Future<List<PeerDetails>> listPeersMethodNodePointer(
      {required NodePointer that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_list_peers__method__NodePointer(port_, arg0),
      parseSuccessData: _wire2api_list_peer_details,
      parseErrorData: null,
      constMeta: kListPeersMethodNodePointerConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPeersMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_peers__method__NodePointer",
        argNames: ["that"],
      );

  Future<String> signMessageMethodNodePointer(
      {required NodePointer that, required Uint8List msg, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_uint_8_list(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign_message__method__NodePointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_node_exception,
      constMeta: kSignMessageMethodNodePointerConstMeta,
      argValues: [that, msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMessageMethodNodePointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_message__method__NodePointer",
        argNames: ["that", "msg"],
      );

  Future<bool> verifySignatureMethodNodePointer(
      {required NodePointer that,
      required Uint8List msg,
      required String sig,
      required PublicKey pkey,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_node_pointer(that);
    var arg1 = _platform.api2wire_uint_8_list(msg);
    var arg2 = _platform.api2wire_String(sig);
    var arg3 = _platform.api2wire_box_autoadd_public_key(pkey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_verify_signature__method__NodePointer(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_node_exception,
      constMeta: kVerifySignatureMethodNodePointerConstMeta,
      argValues: [that, msg, sig, pkey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kVerifySignatureMethodNodePointerConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "verify_signature__method__NodePointer",
            argNames: ["that", "msg", "sig", "pkey"],
          );

  DropFnType get dropOpaqueMutexNodeSqliteStore =>
      _platform.inner.drop_opaque_MutexNodeSqliteStore;
  ShareFnType get shareOpaqueMutexNodeSqliteStore =>
      _platform.inner.share_opaque_MutexNodeSqliteStore;
  OpaqueTypeFinalizer get MutexNodeSqliteStoreFinalizer =>
      _platform.MutexNodeSqliteStoreFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  MutexNodeSqliteStore _wire2api_MutexNodeSqliteStore(dynamic raw) {
    return MutexNodeSqliteStore.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Address _wire2api_address(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Address(
      s: _wire2api_String(arr[0]),
    );
  }

  Bolt11Invoice _wire2api_bolt_11_invoice(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Bolt11Invoice(
      signedRawInvoice: _wire2api_String(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ChannelId _wire2api_box_autoadd_channel_id(dynamic raw) {
    return _wire2api_channel_id(raw);
  }

  Event _wire2api_box_autoadd_event(dynamic raw) {
    return _wire2api_event(raw);
  }

  OutPoint _wire2api_box_autoadd_out_point(dynamic raw) {
    return _wire2api_out_point(raw);
  }

  PaymentDetails _wire2api_box_autoadd_payment_details(dynamic raw) {
    return _wire2api_payment_details(raw);
  }

  PaymentHash _wire2api_box_autoadd_payment_hash(dynamic raw) {
    return _wire2api_payment_hash(raw);
  }

  PaymentPreimage _wire2api_box_autoadd_payment_preimage(dynamic raw) {
    return _wire2api_payment_preimage(raw);
  }

  PaymentSecret _wire2api_box_autoadd_payment_secret(dynamic raw) {
    return _wire2api_payment_secret(raw);
  }

  PublicKey _wire2api_box_autoadd_public_key(dynamic raw) {
    return _wire2api_public_key(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  UserChannelId _wire2api_box_autoadd_user_channel_id(dynamic raw) {
    return _wire2api_user_channel_id(raw);
  }

  BuilderException _wire2api_builder_exception(dynamic raw) {
    return BuilderException.values[raw as int];
  }

  ChannelDetails _wire2api_channel_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return ChannelDetails(
      channelId: _wire2api_channel_id(arr[0]),
      counterpartyNodeId: _wire2api_public_key(arr[1]),
      fundingTxo: _wire2api_opt_String(arr[2]),
      channelValueSats: _wire2api_u64(arr[3]),
      unspendablePunishmentReserve: _wire2api_opt_box_autoadd_u64(arr[4]),
      userChannelId: _wire2api_user_channel_id(arr[5]),
      feerateSatPer1000Weight: _wire2api_u32(arr[6]),
      balanceMsat: _wire2api_u64(arr[7]),
      outboundCapacityMsat: _wire2api_u64(arr[8]),
      inboundCapacityMsat: _wire2api_u64(arr[9]),
      confirmationsRequired: _wire2api_opt_box_autoadd_u32(arr[10]),
      confirmations: _wire2api_opt_box_autoadd_u32(arr[11]),
      isOutbound: _wire2api_bool(arr[12]),
      isChannelReady: _wire2api_bool(arr[13]),
      isUsable: _wire2api_bool(arr[14]),
      isPublic: _wire2api_bool(arr[15]),
    );
  }

  ChannelId _wire2api_channel_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ChannelId(
      data: _wire2api_u8_array_32(arr[0]),
    );
  }

  Event _wire2api_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Event_PaymentSuccessful(
          paymentHash: _wire2api_box_autoadd_payment_hash(raw[1]),
        );
      case 1:
        return Event_PaymentFailed(
          paymentHash: _wire2api_box_autoadd_payment_hash(raw[1]),
        );
      case 2:
        return Event_PaymentReceived(
          paymentHash: _wire2api_box_autoadd_payment_hash(raw[1]),
          amountMsat: _wire2api_u64(raw[2]),
        );
      case 3:
        return Event_ChannelReady(
          channelId: _wire2api_box_autoadd_channel_id(raw[1]),
          userChannelId: _wire2api_box_autoadd_user_channel_id(raw[2]),
          counterpartyNodeId: _wire2api_opt_box_autoadd_public_key(raw[3]),
        );
      case 4:
        return Event_ChannelClosed(
          channelId: _wire2api_box_autoadd_channel_id(raw[1]),
          userChannelId: _wire2api_box_autoadd_user_channel_id(raw[2]),
          counterpartyNodeId: _wire2api_opt_box_autoadd_public_key(raw[3]),
        );
      case 5:
        return Event_ChannelPending(
          channelId: _wire2api_box_autoadd_channel_id(raw[1]),
          userChannelId: _wire2api_box_autoadd_user_channel_id(raw[2]),
          formerTemporaryChannelId: _wire2api_box_autoadd_channel_id(raw[3]),
          counterpartyNodeId: _wire2api_box_autoadd_public_key(raw[4]),
          fundingTxo: _wire2api_box_autoadd_out_point(raw[5]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<ChannelDetails> _wire2api_list_channel_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_channel_details).toList();
  }

  List<PaymentDetails> _wire2api_list_payment_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_payment_details).toList();
  }

  List<PeerDetails> _wire2api_list_peer_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_peer_details).toList();
  }

  List<SocketAddress> _wire2api_list_socket_address(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_socket_address).toList();
  }

  Mnemonic _wire2api_mnemonic(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Mnemonic(
      bridge: this,
      seedPhrase: _wire2api_String(arr[0]),
    );
  }

  NodeException _wire2api_node_exception(dynamic raw) {
    return NodeException.values[raw as int];
  }

  NodePointer _wire2api_node_pointer(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NodePointer(
      bridge: this,
      field0: _wire2api_MutexNodeSqliteStore(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Event? _wire2api_opt_box_autoadd_event(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_event(raw);
  }

  PaymentDetails? _wire2api_opt_box_autoadd_payment_details(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_payment_details(raw);
  }

  PaymentPreimage? _wire2api_opt_box_autoadd_payment_preimage(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_payment_preimage(raw);
  }

  PaymentSecret? _wire2api_opt_box_autoadd_payment_secret(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_payment_secret(raw);
  }

  PublicKey? _wire2api_opt_box_autoadd_public_key(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_public_key(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  List<SocketAddress>? _wire2api_opt_list_socket_address(dynamic raw) {
    return raw == null ? null : _wire2api_list_socket_address(raw);
  }

  OutPoint _wire2api_out_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OutPoint(
      txid: _wire2api_txid(arr[0]),
      vout: _wire2api_u32(arr[1]),
    );
  }

  PaymentDetails _wire2api_payment_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PaymentDetails(
      hash: _wire2api_payment_hash(arr[0]),
      preimage: _wire2api_opt_box_autoadd_payment_preimage(arr[1]),
      secret: _wire2api_opt_box_autoadd_payment_secret(arr[2]),
      amountMsat: _wire2api_opt_box_autoadd_u64(arr[3]),
      direction: _wire2api_payment_direction(arr[4]),
      status: _wire2api_payment_status(arr[5]),
    );
  }

  PaymentDirection _wire2api_payment_direction(dynamic raw) {
    return PaymentDirection.values[raw as int];
  }

  PaymentHash _wire2api_payment_hash(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PaymentHash(
      data: _wire2api_u8_array_32(arr[0]),
    );
  }

  PaymentPreimage _wire2api_payment_preimage(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PaymentPreimage(
      data: _wire2api_u8_array_32(arr[0]),
    );
  }

  PaymentSecret _wire2api_payment_secret(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PaymentSecret(
      data: _wire2api_u8_array_32(arr[0]),
    );
  }

  PaymentStatus _wire2api_payment_status(dynamic raw) {
    return PaymentStatus.values[raw as int];
  }

  PeerDetails _wire2api_peer_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PeerDetails(
      nodeId: _wire2api_public_key(arr[0]),
      address: _wire2api_socket_address(arr[1]),
      isConnected: _wire2api_bool(arr[2]),
    );
  }

  PublicKey _wire2api_public_key(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PublicKey(
      hexCode: _wire2api_String(arr[0]),
    );
  }

  SocketAddress _wire2api_socket_address(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SocketAddress_TcpIpV4(
          addr: _wire2api_u8_array_4(raw[1]),
          port: _wire2api_u16(raw[2]),
        );
      case 1:
        return SocketAddress_TcpIpV6(
          addr: _wire2api_u8_array_16(raw[1]),
          port: _wire2api_u16(raw[2]),
        );
      case 2:
        return SocketAddress_OnionV2(
          _wire2api_u8_array_12(raw[1]),
        );
      case 3:
        return SocketAddress_OnionV3(
          ed25519Pubkey: _wire2api_u8_array_32(raw[1]),
          checksum: _wire2api_u16(raw[2]),
          version: _wire2api_u8(raw[3]),
          port: _wire2api_u16(raw[4]),
        );
      case 4:
        return SocketAddress_Hostname(
          addr: _wire2api_String(raw[1]),
          port: _wire2api_u16(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Txid _wire2api_txid(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Txid(
      hash: _wire2api_String(arr[0]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array12 _wire2api_u8_array_12(dynamic raw) {
    return U8Array12(_wire2api_uint_8_list(raw));
  }

  U8Array16 _wire2api_u8_array_16(dynamic raw) {
    return U8Array16(_wire2api_uint_8_list(raw));
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  U8Array4 _wire2api_u8_array_4(dynamic raw) {
    return U8Array4(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UserChannelId _wire2api_user_channel_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserChannelId(
      data: _wire2api_u64(arr[0]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_log_level(LogLevel raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_payment_direction(PaymentDirection raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class LdknodePlatform extends FlutterRustBridgeBase<LdknodeWire> {
  LdknodePlatform(ffi.DynamicLibrary dylib) : super(LdknodeWire(dylib));

// Section: api2wire

  @protected
  wire_MutexNodeSqliteStore api2wire_MutexNodeSqliteStore(
      MutexNodeSqliteStore raw) {
    final ptr = inner.new_MutexNodeSqliteStore();
    _api_fill_to_wire_MutexNodeSqliteStore(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Address> api2wire_box_autoadd_address(Address raw) {
    final ptr = inner.new_box_autoadd_address_0();
    _api_fill_to_wire_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Bolt11Invoice> api2wire_box_autoadd_bolt_11_invoice(
      Bolt11Invoice raw) {
    final ptr = inner.new_box_autoadd_bolt_11_invoice_0();
    _api_fill_to_wire_bolt_11_invoice(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ChainDataSourceConfig>
      api2wire_box_autoadd_chain_data_source_config(ChainDataSourceConfig raw) {
    final ptr = inner.new_box_autoadd_chain_data_source_config_0();
    _api_fill_to_wire_chain_data_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ChannelConfig> api2wire_box_autoadd_channel_config(
      ChannelConfig raw) {
    final ptr = inner.new_box_autoadd_channel_config_0();
    _api_fill_to_wire_channel_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ChannelId> api2wire_box_autoadd_channel_id(ChannelId raw) {
    final ptr = inner.new_box_autoadd_channel_id_0();
    _api_fill_to_wire_channel_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config_0();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EntropySourceConfig>
      api2wire_box_autoadd_entropy_source_config(EntropySourceConfig raw) {
    final ptr = inner.new_box_autoadd_entropy_source_config_0();
    _api_fill_to_wire_entropy_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GossipSourceConfig>
      api2wire_box_autoadd_gossip_source_config(GossipSourceConfig raw) {
    final ptr = inner.new_box_autoadd_gossip_source_config_0();
    _api_fill_to_wire_gossip_source_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LdkBuilder> api2wire_box_autoadd_ldk_builder(
      LdkBuilder raw) {
    final ptr = inner.new_box_autoadd_ldk_builder_0();
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Mnemonic> api2wire_box_autoadd_mnemonic(Mnemonic raw) {
    final ptr = inner.new_box_autoadd_mnemonic_0();
    _api_fill_to_wire_mnemonic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NodePointer> api2wire_box_autoadd_node_pointer(
      NodePointer raw) {
    final ptr = inner.new_box_autoadd_node_pointer_0();
    _api_fill_to_wire_node_pointer(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PaymentHash> api2wire_box_autoadd_payment_hash(
      PaymentHash raw) {
    final ptr = inner.new_box_autoadd_payment_hash_0();
    _api_fill_to_wire_payment_hash(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PublicKey> api2wire_box_autoadd_public_key(PublicKey raw) {
    final ptr = inner.new_box_autoadd_public_key_0();
    _api_fill_to_wire_public_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SocketAddress> api2wire_box_autoadd_socket_address(
      SocketAddress raw) {
    final ptr = inner.new_box_autoadd_socket_address_0();
    _api_fill_to_wire_socket_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  ffi.Pointer<wire_list_public_key> api2wire_list_public_key(
      List<PublicKey> raw) {
    final ans = inner.new_list_public_key_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_public_key(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_socket_address> api2wire_list_socket_address(
      List<SocketAddress> raw) {
    final ans = inner.new_list_socket_address_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_socket_address(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_ChainDataSourceConfig>
      api2wire_opt_box_autoadd_chain_data_source_config(
          ChainDataSourceConfig? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_chain_data_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_ChannelConfig> api2wire_opt_box_autoadd_channel_config(
      ChannelConfig? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_channel_config(raw);
  }

  @protected
  ffi.Pointer<wire_EntropySourceConfig>
      api2wire_opt_box_autoadd_entropy_source_config(EntropySourceConfig? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_entropy_source_config(raw);
  }

  @protected
  ffi.Pointer<wire_GossipSourceConfig>
      api2wire_opt_box_autoadd_gossip_source_config(GossipSourceConfig? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_gossip_source_config(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  ffi.Pointer<wire_list_socket_address> api2wire_opt_list_socket_address(
      List<SocketAddress>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_socket_address(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_12(U8Array12 raw) {
    final ans = inner.new_uint_8_list_0(12);
    ans.ref.ptr.asTypedList(12).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_16(U8Array16 raw) {
    final ans = inner.new_uint_8_list_0(16);
    ans.ref.ptr.asTypedList(16).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_32(U8Array32 raw) {
    final ans = inner.new_uint_8_list_0(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_4(U8Array4 raw) {
    final ans = inner.new_uint_8_list_0(4);
    ans.ref.ptr.asTypedList(4).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_64(U8Array64 raw) {
    final ans = inner.new_uint_8_list_0(64);
    ans.ref.ptr.asTypedList(64).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _MutexNodeSqliteStoreFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_MutexNodeSqliteStorePtr);
  OpaqueTypeFinalizer get MutexNodeSqliteStoreFinalizer =>
      _MutexNodeSqliteStoreFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_MutexNodeSqliteStore(
      MutexNodeSqliteStore apiObj, wire_MutexNodeSqliteStore wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_address(Address apiObj, wire_Address wireObj) {
    wireObj.s = api2wire_String(apiObj.s);
  }

  void _api_fill_to_wire_bolt_11_invoice(
      Bolt11Invoice apiObj, wire_Bolt11Invoice wireObj) {
    wireObj.signed_raw_invoice = api2wire_String(apiObj.signedRawInvoice);
  }

  void _api_fill_to_wire_box_autoadd_address(
      Address apiObj, ffi.Pointer<wire_Address> wireObj) {
    _api_fill_to_wire_address(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_bolt_11_invoice(
      Bolt11Invoice apiObj, ffi.Pointer<wire_Bolt11Invoice> wireObj) {
    _api_fill_to_wire_bolt_11_invoice(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_chain_data_source_config(
      ChainDataSourceConfig apiObj,
      ffi.Pointer<wire_ChainDataSourceConfig> wireObj) {
    _api_fill_to_wire_chain_data_source_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_channel_config(
      ChannelConfig apiObj, ffi.Pointer<wire_ChannelConfig> wireObj) {
    _api_fill_to_wire_channel_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_channel_id(
      ChannelId apiObj, ffi.Pointer<wire_ChannelId> wireObj) {
    _api_fill_to_wire_channel_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_entropy_source_config(
      EntropySourceConfig apiObj,
      ffi.Pointer<wire_EntropySourceConfig> wireObj) {
    _api_fill_to_wire_entropy_source_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_gossip_source_config(
      GossipSourceConfig apiObj, ffi.Pointer<wire_GossipSourceConfig> wireObj) {
    _api_fill_to_wire_gossip_source_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_mnemonic(
      Mnemonic apiObj, ffi.Pointer<wire_Mnemonic> wireObj) {
    _api_fill_to_wire_mnemonic(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_node_pointer(
      NodePointer apiObj, ffi.Pointer<wire_NodePointer> wireObj) {
    _api_fill_to_wire_node_pointer(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_payment_hash(
      PaymentHash apiObj, ffi.Pointer<wire_PaymentHash> wireObj) {
    _api_fill_to_wire_payment_hash(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_public_key(
      PublicKey apiObj, ffi.Pointer<wire_PublicKey> wireObj) {
    _api_fill_to_wire_public_key(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_socket_address(
      SocketAddress apiObj, ffi.Pointer<wire_SocketAddress> wireObj) {
    _api_fill_to_wire_socket_address(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_chain_data_source_config(
      ChainDataSourceConfig apiObj, wire_ChainDataSourceConfig wireObj) {
    if (apiObj is ChainDataSourceConfig_Esplora) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ChainDataSourceConfig_Esplora();
      wireObj.kind.ref.Esplora.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_channel_config(
      ChannelConfig apiObj, wire_ChannelConfig wireObj) {
    wireObj.forwarding_fee_proportional_millionths =
        api2wire_u32(apiObj.forwardingFeeProportionalMillionths);
    wireObj.forwarding_fee_base_msat =
        api2wire_u32(apiObj.forwardingFeeBaseMsat);
    wireObj.cltv_expiry_delta = api2wire_u16(apiObj.cltvExpiryDelta);
    _api_fill_to_wire_max_dust_htlc_exposure(
        apiObj.maxDustHtlcExposure, wireObj.max_dust_htlc_exposure);
    wireObj.force_close_avoidance_max_fee_satoshis =
        api2wire_u64(apiObj.forceCloseAvoidanceMaxFeeSatoshis);
    wireObj.accept_underpaying_htlcs =
        api2wire_bool(apiObj.acceptUnderpayingHtlcs);
  }

  void _api_fill_to_wire_channel_id(ChannelId apiObj, wire_ChannelId wireObj) {
    wireObj.data = api2wire_u8_array_32(apiObj.data);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.storage_dir_path = api2wire_String(apiObj.storageDirPath);
    wireObj.log_dir_path = api2wire_opt_String(apiObj.logDirPath);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.listening_addresses =
        api2wire_opt_list_socket_address(apiObj.listeningAddresses);
    wireObj.default_cltv_expiry_delta =
        api2wire_u32(apiObj.defaultCltvExpiryDelta);
    wireObj.onchain_wallet_sync_interval_secs =
        api2wire_u64(apiObj.onchainWalletSyncIntervalSecs);
    wireObj.wallet_sync_interval_secs =
        api2wire_u64(apiObj.walletSyncIntervalSecs);
    wireObj.fee_rate_cache_update_interval_secs =
        api2wire_u64(apiObj.feeRateCacheUpdateIntervalSecs);
    wireObj.trusted_peers_0conf =
        api2wire_list_public_key(apiObj.trustedPeers0Conf);
    wireObj.probing_liquidity_limit_multiplier =
        api2wire_u64(apiObj.probingLiquidityLimitMultiplier);
    wireObj.log_level = api2wire_log_level(apiObj.logLevel);
  }

  void _api_fill_to_wire_entropy_source_config(
      EntropySourceConfig apiObj, wire_EntropySourceConfig wireObj) {
    if (apiObj is EntropySourceConfig_SeedFile) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_EntropySourceConfig_SeedFile();
      wireObj.kind.ref.SeedFile.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_SeedBytes) {
      var pre_field0 = api2wire_u8_array_64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_EntropySourceConfig_SeedBytes();
      wireObj.kind.ref.SeedBytes.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is EntropySourceConfig_Bip39Mnemonic) {
      var pre_mnemonic = api2wire_box_autoadd_mnemonic(apiObj.mnemonic);
      var pre_passphrase = api2wire_opt_String(apiObj.passphrase);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_EntropySourceConfig_Bip39Mnemonic();
      wireObj.kind.ref.Bip39Mnemonic.ref.mnemonic = pre_mnemonic;
      wireObj.kind.ref.Bip39Mnemonic.ref.passphrase = pre_passphrase;
      return;
    }
  }

  void _api_fill_to_wire_gossip_source_config(
      GossipSourceConfig apiObj, wire_GossipSourceConfig wireObj) {
    if (apiObj is GossipSourceConfig_P2PNetwork) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is GossipSourceConfig_RapidGossipSync) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_GossipSourceConfig_RapidGossipSync();
      wireObj.kind.ref.RapidGossipSync.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_ldk_builder(
      LdkBuilder apiObj, wire_LdkBuilder wireObj) {}

  void _api_fill_to_wire_max_dust_htlc_exposure(
      MaxDustHTLCExposure apiObj, wire_MaxDustHTLCExposure wireObj) {
    if (apiObj is MaxDustHTLCExposure_FixedLimitMsat) {
      var pre_field0 = api2wire_u64(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_MaxDustHTLCExposure_FixedLimitMsat();
      wireObj.kind.ref.FixedLimitMsat.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is MaxDustHTLCExposure_FeeRateMultiplier) {
      var pre_field0 = api2wire_u64(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_MaxDustHTLCExposure_FeeRateMultiplier();
      wireObj.kind.ref.FeeRateMultiplier.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_mnemonic(Mnemonic apiObj, wire_Mnemonic wireObj) {
    wireObj.seed_phrase = api2wire_String(apiObj.seedPhrase);
  }

  void _api_fill_to_wire_node_pointer(
      NodePointer apiObj, wire_NodePointer wireObj) {
    wireObj.field0 = api2wire_MutexNodeSqliteStore(apiObj.field0);
  }

  void _api_fill_to_wire_payment_hash(
      PaymentHash apiObj, wire_PaymentHash wireObj) {
    wireObj.data = api2wire_u8_array_32(apiObj.data);
  }

  void _api_fill_to_wire_public_key(PublicKey apiObj, wire_PublicKey wireObj) {
    wireObj.hex_code = api2wire_String(apiObj.hexCode);
  }

  void _api_fill_to_wire_socket_address(
      SocketAddress apiObj, wire_SocketAddress wireObj) {
    if (apiObj is SocketAddress_TcpIpV4) {
      var pre_addr = api2wire_u8_array_4(apiObj.addr);
      var pre_port = api2wire_u16(apiObj.port);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_SocketAddress_TcpIpV4();
      wireObj.kind.ref.TcpIpV4.ref.addr = pre_addr;
      wireObj.kind.ref.TcpIpV4.ref.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_TcpIpV6) {
      var pre_addr = api2wire_u8_array_16(apiObj.addr);
      var pre_port = api2wire_u16(apiObj.port);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_SocketAddress_TcpIpV6();
      wireObj.kind.ref.TcpIpV6.ref.addr = pre_addr;
      wireObj.kind.ref.TcpIpV6.ref.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_OnionV2) {
      var pre_field0 = api2wire_u8_array_12(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_SocketAddress_OnionV2();
      wireObj.kind.ref.OnionV2.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SocketAddress_OnionV3) {
      var pre_ed25519_pubkey = api2wire_u8_array_32(apiObj.ed25519Pubkey);
      var pre_checksum = api2wire_u16(apiObj.checksum);
      var pre_version = api2wire_u8(apiObj.version);
      var pre_port = api2wire_u16(apiObj.port);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_SocketAddress_OnionV3();
      wireObj.kind.ref.OnionV3.ref.ed25519_pubkey = pre_ed25519_pubkey;
      wireObj.kind.ref.OnionV3.ref.checksum = pre_checksum;
      wireObj.kind.ref.OnionV3.ref.version = pre_version;
      wireObj.kind.ref.OnionV3.ref.port = pre_port;
      return;
    }
    if (apiObj is SocketAddress_Hostname) {
      var pre_addr = api2wire_String(apiObj.addr);
      var pre_port = api2wire_u16(apiObj.port);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_SocketAddress_Hostname();
      wireObj.kind.ref.Hostname.ref.addr = pre_addr;
      wireObj.kind.ref.Hostname.ref.port = pre_port;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class LdknodeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LdknodeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LdknodeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_from_str__static_method__SocketAddress(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_from_str__static_method__SocketAddress(
      port_,
      address,
    );
  }

  late final _wire_from_str__static_method__SocketAddressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_from_str__static_method__SocketAddress');
  late final _wire_from_str__static_method__SocketAddress =
      _wire_from_str__static_method__SocketAddressPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_to_string__method__SocketAddress(
    int port_,
    ffi.Pointer<wire_SocketAddress> that,
  ) {
    return _wire_to_string__method__SocketAddress(
      port_,
      that,
    );
  }

  late final _wire_to_string__method__SocketAddressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SocketAddress>)>>(
      'wire_to_string__method__SocketAddress');
  late final _wire_to_string__method__SocketAddress =
      _wire_to_string__method__SocketAddressPtr
          .asFunction<void Function(int, ffi.Pointer<wire_SocketAddress>)>();

  void wire_generate__static_method__Mnemonic(
    int port_,
  ) {
    return _wire_generate__static_method__Mnemonic(
      port_,
    );
  }

  late final _wire_generate__static_method__MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_generate__static_method__Mnemonic');
  late final _wire_generate__static_method__Mnemonic =
      _wire_generate__static_method__MnemonicPtr
          .asFunction<void Function(int)>();

  void wire_finalize_builder__method__LdkBuilder(
    int port_,
    ffi.Pointer<wire_LdkBuilder> that,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_ChainDataSourceConfig> chain_data_source_config,
    ffi.Pointer<wire_EntropySourceConfig> entropy_source_config,
    ffi.Pointer<wire_GossipSourceConfig> gossip_source_config,
  ) {
    return _wire_finalize_builder__method__LdkBuilder(
      port_,
      that,
      config,
      chain_data_source_config,
      entropy_source_config,
      gossip_source_config,
    );
  }

  late final _wire_finalize_builder__method__LdkBuilderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_LdkBuilder>,
                  ffi.Pointer<wire_Config>,
                  ffi.Pointer<wire_ChainDataSourceConfig>,
                  ffi.Pointer<wire_EntropySourceConfig>,
                  ffi.Pointer<wire_GossipSourceConfig>)>>(
      'wire_finalize_builder__method__LdkBuilder');
  late final _wire_finalize_builder__method__LdkBuilder =
      _wire_finalize_builder__method__LdkBuilderPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_LdkBuilder>,
              ffi.Pointer<wire_Config>,
              ffi.Pointer<wire_ChainDataSourceConfig>,
              ffi.Pointer<wire_EntropySourceConfig>,
              ffi.Pointer<wire_GossipSourceConfig>)>();

  void wire_start__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_start__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_start__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_start__method__NodePointer');
  late final _wire_start__method__NodePointer =
      _wire_start__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_stop__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_stop__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_stop__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_stop__method__NodePointer');
  late final _wire_stop__method__NodePointer =
      _wire_stop__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_event_handled__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_event_handled__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_event_handled__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_event_handled__method__NodePointer');
  late final _wire_event_handled__method__NodePointer =
      _wire_event_handled__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_next_event__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_next_event__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_next_event__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_next_event__method__NodePointer');
  late final _wire_next_event__method__NodePointer =
      _wire_next_event__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_wait_until_next_event__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_wait_until_next_event__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_wait_until_next_event__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_wait_until_next_event__method__NodePointer');
  late final _wire_wait_until_next_event__method__NodePointer =
      _wire_wait_until_next_event__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_node_id__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_node_id__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_node_id__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_node_id__method__NodePointer');
  late final _wire_node_id__method__NodePointer =
      _wire_node_id__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_listening_addresses__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_listening_addresses__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_listening_addresses__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_listening_addresses__method__NodePointer');
  late final _wire_listening_addresses__method__NodePointer =
      _wire_listening_addresses__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_new_onchain_address__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_new_onchain_address__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_new_onchain_address__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_new_onchain_address__method__NodePointer');
  late final _wire_new_onchain_address__method__NodePointer =
      _wire_new_onchain_address__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_spendable_onchain_balance_sats__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_spendable_onchain_balance_sats__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_spendable_onchain_balance_sats__method__NodePointerPtr =
      _lookup<
              ffi
              .NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
          'wire_spendable_onchain_balance_sats__method__NodePointer');
  late final _wire_spendable_onchain_balance_sats__method__NodePointer =
      _wire_spendable_onchain_balance_sats__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_total_onchain_balance_sats__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_total_onchain_balance_sats__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_total_onchain_balance_sats__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_total_onchain_balance_sats__method__NodePointer');
  late final _wire_total_onchain_balance_sats__method__NodePointer =
      _wire_total_onchain_balance_sats__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_send_to_onchain_address__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Address> address,
    int amount_sats,
  ) {
    return _wire_send_to_onchain_address__method__NodePointer(
      port_,
      that,
      address,
      amount_sats,
    );
  }

  late final _wire_send_to_onchain_address__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_Address>, ffi.Uint64)>>(
      'wire_send_to_onchain_address__method__NodePointer');
  late final _wire_send_to_onchain_address__method__NodePointer =
      _wire_send_to_onchain_address__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_Address>, int)>();

  void wire_send_all_to_onchain_address__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Address> address,
  ) {
    return _wire_send_all_to_onchain_address__method__NodePointer(
      port_,
      that,
      address,
    );
  }

  late final _wire_send_all_to_onchain_address__method__NodePointerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                      ffi.Pointer<wire_Address>)>>(
          'wire_send_all_to_onchain_address__method__NodePointer');
  late final _wire_send_all_to_onchain_address__method__NodePointer =
      _wire_send_all_to_onchain_address__method__NodePointerPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_NodePointer>, ffi.Pointer<wire_Address>)>();

  void wire_list_channels__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_list_channels__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_list_channels__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_list_channels__method__NodePointer');
  late final _wire_list_channels__method__NodePointer =
      _wire_list_channels__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_connect__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PublicKey> node_id,
    ffi.Pointer<wire_SocketAddress> address,
    bool persist,
  ) {
    return _wire_connect__method__NodePointer(
      port_,
      that,
      node_id,
      address,
      persist,
    );
  }

  late final _wire_connect__method__NodePointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_PublicKey>,
              ffi.Pointer<wire_SocketAddress>,
              ffi.Bool)>>('wire_connect__method__NodePointer');
  late final _wire_connect__method__NodePointer =
      _wire_connect__method__NodePointerPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_PublicKey>,
              ffi.Pointer<wire_SocketAddress>,
              bool)>();

  void wire_disconnect__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PublicKey> counterparty_node_id,
  ) {
    return _wire_disconnect__method__NodePointer(
      port_,
      that,
      counterparty_node_id,
    );
  }

  late final _wire_disconnect__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_PublicKey>)>>(
      'wire_disconnect__method__NodePointer');
  late final _wire_disconnect__method__NodePointer =
      _wire_disconnect__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_PublicKey>)>();

  void wire_connect_open_channel__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_SocketAddress> address,
    ffi.Pointer<wire_PublicKey> node_id,
    int channel_amount_sats,
    ffi.Pointer<ffi.Uint64> push_to_counterparty_msat,
    bool announce_channel,
    ffi.Pointer<wire_ChannelConfig> channel_config,
  ) {
    return _wire_connect_open_channel__method__NodePointer(
      port_,
      that,
      address,
      node_id,
      channel_amount_sats,
      push_to_counterparty_msat,
      announce_channel,
      channel_config,
    );
  }

  late final _wire_connect_open_channel__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_SocketAddress>,
                  ffi.Pointer<wire_PublicKey>,
                  ffi.Uint64,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Bool,
                  ffi.Pointer<wire_ChannelConfig>)>>(
      'wire_connect_open_channel__method__NodePointer');
  late final _wire_connect_open_channel__method__NodePointer =
      _wire_connect_open_channel__method__NodePointerPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_SocketAddress>,
              ffi.Pointer<wire_PublicKey>,
              int,
              ffi.Pointer<ffi.Uint64>,
              bool,
              ffi.Pointer<wire_ChannelConfig>)>();

  void wire_sync_wallets__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_sync_wallets__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_sync_wallets__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_sync_wallets__method__NodePointer');
  late final _wire_sync_wallets__method__NodePointer =
      _wire_sync_wallets__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_close_channel__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_ChannelId> channel_id,
    ffi.Pointer<wire_PublicKey> counterparty_node_id,
  ) {
    return _wire_close_channel__method__NodePointer(
      port_,
      that,
      channel_id,
      counterparty_node_id,
    );
  }

  late final _wire_close_channel__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_ChannelId>, ffi.Pointer<wire_PublicKey>)>>(
      'wire_close_channel__method__NodePointer');
  late final _wire_close_channel__method__NodePointer =
      _wire_close_channel__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_ChannelId>, ffi.Pointer<wire_PublicKey>)>();

  void wire_update_channel_config__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_ChannelId> channel_id,
    ffi.Pointer<wire_PublicKey> counterparty_node_id,
    ffi.Pointer<wire_ChannelConfig> channel_config,
  ) {
    return _wire_update_channel_config__method__NodePointer(
      port_,
      that,
      channel_id,
      counterparty_node_id,
      channel_config,
    );
  }

  late final _wire_update_channel_config__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_ChannelId>,
                  ffi.Pointer<wire_PublicKey>,
                  ffi.Pointer<wire_ChannelConfig>)>>(
      'wire_update_channel_config__method__NodePointer');
  late final _wire_update_channel_config__method__NodePointer =
      _wire_update_channel_config__method__NodePointerPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_ChannelId>,
              ffi.Pointer<wire_PublicKey>,
              ffi.Pointer<wire_ChannelConfig>)>();

  void wire_send_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Bolt11Invoice> invoice,
  ) {
    return _wire_send_payment__method__NodePointer(
      port_,
      that,
      invoice,
    );
  }

  late final _wire_send_payment__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_Bolt11Invoice>)>>(
      'wire_send_payment__method__NodePointer');
  late final _wire_send_payment__method__NodePointer =
      _wire_send_payment__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_Bolt11Invoice>)>();

  void wire_send_payment_using_amount__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Bolt11Invoice> invoice,
    int amount_msat,
  ) {
    return _wire_send_payment_using_amount__method__NodePointer(
      port_,
      that,
      invoice,
      amount_msat,
    );
  }

  late final _wire_send_payment_using_amount__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_Bolt11Invoice>, ffi.Uint64)>>(
      'wire_send_payment_using_amount__method__NodePointer');
  late final _wire_send_payment_using_amount__method__NodePointer =
      _wire_send_payment_using_amount__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_Bolt11Invoice>, int)>();

  void wire_send_spontaneous_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    int amount_msat,
    ffi.Pointer<wire_PublicKey> node_id,
  ) {
    return _wire_send_spontaneous_payment__method__NodePointer(
      port_,
      that,
      amount_msat,
      node_id,
    );
  }

  late final _wire_send_spontaneous_payment__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Uint64, ffi.Pointer<wire_PublicKey>)>>(
      'wire_send_spontaneous_payment__method__NodePointer');
  late final _wire_send_spontaneous_payment__method__NodePointer =
      _wire_send_spontaneous_payment__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>, int,
              ffi.Pointer<wire_PublicKey>)>();

  void wire_send_payment_probes__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_Bolt11Invoice> invoice,
  ) {
    return _wire_send_payment_probes__method__NodePointer(
      port_,
      that,
      invoice,
    );
  }

  late final _wire_send_payment_probes__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_Bolt11Invoice>)>>(
      'wire_send_payment_probes__method__NodePointer');
  late final _wire_send_payment_probes__method__NodePointer =
      _wire_send_payment_probes__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_Bolt11Invoice>)>();

  void wire_send_spontaneous_payment_probes__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    int amount_msat,
    ffi.Pointer<wire_PublicKey> node_id,
  ) {
    return _wire_send_spontaneous_payment_probes__method__NodePointer(
      port_,
      that,
      amount_msat,
      node_id,
    );
  }

  late final _wire_send_spontaneous_payment_probes__method__NodePointerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                      ffi.Uint64, ffi.Pointer<wire_PublicKey>)>>(
          'wire_send_spontaneous_payment_probes__method__NodePointer');
  late final _wire_send_spontaneous_payment_probes__method__NodePointer =
      _wire_send_spontaneous_payment_probes__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>, int,
              ffi.Pointer<wire_PublicKey>)>();

  void wire_receive_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    int amount_msat,
    ffi.Pointer<wire_uint_8_list> description,
    int expiry_secs,
  ) {
    return _wire_receive_payment__method__NodePointer(
      port_,
      that,
      amount_msat,
      description,
      expiry_secs,
    );
  }

  late final _wire_receive_payment__method__NodePointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_NodePointer>,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_receive_payment__method__NodePointer');
  late final _wire_receive_payment__method__NodePointer =
      _wire_receive_payment__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>, int,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_receive_variable_amount_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_uint_8_list> description,
    int expiry_secs,
  ) {
    return _wire_receive_variable_amount_payment__method__NodePointer(
      port_,
      that,
      description,
      expiry_secs,
    );
  }

  late final _wire_receive_variable_amount_payment__method__NodePointerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                      ffi.Pointer<wire_uint_8_list>, ffi.Uint32)>>(
          'wire_receive_variable_amount_payment__method__NodePointer');
  late final _wire_receive_variable_amount_payment__method__NodePointer =
      _wire_receive_variable_amount_payment__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PaymentHash> payment_hash,
  ) {
    return _wire_payment__method__NodePointer(
      port_,
      that,
      payment_hash,
    );
  }

  late final _wire_payment__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_PaymentHash>)>>(
      'wire_payment__method__NodePointer');
  late final _wire_payment__method__NodePointer =
      _wire_payment__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_PaymentHash>)>();

  void wire_remove_payment__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_PaymentHash> payment_hash,
  ) {
    return _wire_remove_payment__method__NodePointer(
      port_,
      that,
      payment_hash,
    );
  }

  late final _wire_remove_payment__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_PaymentHash>)>>(
      'wire_remove_payment__method__NodePointer');
  late final _wire_remove_payment__method__NodePointer =
      _wire_remove_payment__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_PaymentHash>)>();

  void wire_list_payments_with_filter__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    int payment_direction,
  ) {
    return _wire_list_payments_with_filter__method__NodePointer(
      port_,
      that,
      payment_direction,
    );
  }

  late final _wire_list_payments_with_filter__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_NodePointer>, ffi.Int32)>>(
      'wire_list_payments_with_filter__method__NodePointer');
  late final _wire_list_payments_with_filter__method__NodePointer =
      _wire_list_payments_with_filter__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>, int)>();

  void wire_list_payments__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_list_payments__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_list_payments__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_list_payments__method__NodePointer');
  late final _wire_list_payments__method__NodePointer =
      _wire_list_payments__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_list_peers__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
  ) {
    return _wire_list_peers__method__NodePointer(
      port_,
      that,
    );
  }

  late final _wire_list_peers__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>)>>(
      'wire_list_peers__method__NodePointer');
  late final _wire_list_peers__method__NodePointer =
      _wire_list_peers__method__NodePointerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_NodePointer>)>();

  void wire_sign_message__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_sign_message__method__NodePointer(
      port_,
      that,
      msg,
    );
  }

  late final _wire_sign_message__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_sign_message__method__NodePointer');
  late final _wire_sign_message__method__NodePointer =
      _wire_sign_message__method__NodePointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_verify_signature__method__NodePointer(
    int port_,
    ffi.Pointer<wire_NodePointer> that,
    ffi.Pointer<wire_uint_8_list> msg,
    ffi.Pointer<wire_uint_8_list> sig,
    ffi.Pointer<wire_PublicKey> pkey,
  ) {
    return _wire_verify_signature__method__NodePointer(
      port_,
      that,
      msg,
      sig,
      pkey,
    );
  }

  late final _wire_verify_signature__method__NodePointerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_NodePointer>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_PublicKey>)>>(
      'wire_verify_signature__method__NodePointer');
  late final _wire_verify_signature__method__NodePointer =
      _wire_verify_signature__method__NodePointerPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_NodePointer>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_PublicKey>)>();

  wire_MutexNodeSqliteStore new_MutexNodeSqliteStore() {
    return _new_MutexNodeSqliteStore();
  }

  late final _new_MutexNodeSqliteStorePtr =
      _lookup<ffi.NativeFunction<wire_MutexNodeSqliteStore Function()>>(
          'new_MutexNodeSqliteStore');
  late final _new_MutexNodeSqliteStore = _new_MutexNodeSqliteStorePtr
      .asFunction<wire_MutexNodeSqliteStore Function()>();

  ffi.Pointer<wire_Address> new_box_autoadd_address_0() {
    return _new_box_autoadd_address_0();
  }

  late final _new_box_autoadd_address_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Address> Function()>>(
          'new_box_autoadd_address_0');
  late final _new_box_autoadd_address_0 = _new_box_autoadd_address_0Ptr
      .asFunction<ffi.Pointer<wire_Address> Function()>();

  ffi.Pointer<wire_Bolt11Invoice> new_box_autoadd_bolt_11_invoice_0() {
    return _new_box_autoadd_bolt_11_invoice_0();
  }

  late final _new_box_autoadd_bolt_11_invoice_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Bolt11Invoice> Function()>>(
          'new_box_autoadd_bolt_11_invoice_0');
  late final _new_box_autoadd_bolt_11_invoice_0 =
      _new_box_autoadd_bolt_11_invoice_0Ptr
          .asFunction<ffi.Pointer<wire_Bolt11Invoice> Function()>();

  ffi.Pointer<wire_ChainDataSourceConfig>
      new_box_autoadd_chain_data_source_config_0() {
    return _new_box_autoadd_chain_data_source_config_0();
  }

  late final _new_box_autoadd_chain_data_source_config_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_ChainDataSourceConfig> Function()>>(
      'new_box_autoadd_chain_data_source_config_0');
  late final _new_box_autoadd_chain_data_source_config_0 =
      _new_box_autoadd_chain_data_source_config_0Ptr
          .asFunction<ffi.Pointer<wire_ChainDataSourceConfig> Function()>();

  ffi.Pointer<wire_ChannelConfig> new_box_autoadd_channel_config_0() {
    return _new_box_autoadd_channel_config_0();
  }

  late final _new_box_autoadd_channel_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ChannelConfig> Function()>>(
          'new_box_autoadd_channel_config_0');
  late final _new_box_autoadd_channel_config_0 =
      _new_box_autoadd_channel_config_0Ptr
          .asFunction<ffi.Pointer<wire_ChannelConfig> Function()>();

  ffi.Pointer<wire_ChannelId> new_box_autoadd_channel_id_0() {
    return _new_box_autoadd_channel_id_0();
  }

  late final _new_box_autoadd_channel_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ChannelId> Function()>>(
          'new_box_autoadd_channel_id_0');
  late final _new_box_autoadd_channel_id_0 = _new_box_autoadd_channel_id_0Ptr
      .asFunction<ffi.Pointer<wire_ChannelId> Function()>();

  ffi.Pointer<wire_Config> new_box_autoadd_config_0() {
    return _new_box_autoadd_config_0();
  }

  late final _new_box_autoadd_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>(
          'new_box_autoadd_config_0');
  late final _new_box_autoadd_config_0 = _new_box_autoadd_config_0Ptr
      .asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_EntropySourceConfig>
      new_box_autoadd_entropy_source_config_0() {
    return _new_box_autoadd_entropy_source_config_0();
  }

  late final _new_box_autoadd_entropy_source_config_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_EntropySourceConfig> Function()>>(
      'new_box_autoadd_entropy_source_config_0');
  late final _new_box_autoadd_entropy_source_config_0 =
      _new_box_autoadd_entropy_source_config_0Ptr
          .asFunction<ffi.Pointer<wire_EntropySourceConfig> Function()>();

  ffi.Pointer<wire_GossipSourceConfig>
      new_box_autoadd_gossip_source_config_0() {
    return _new_box_autoadd_gossip_source_config_0();
  }

  late final _new_box_autoadd_gossip_source_config_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_GossipSourceConfig> Function()>>(
      'new_box_autoadd_gossip_source_config_0');
  late final _new_box_autoadd_gossip_source_config_0 =
      _new_box_autoadd_gossip_source_config_0Ptr
          .asFunction<ffi.Pointer<wire_GossipSourceConfig> Function()>();

  ffi.Pointer<wire_LdkBuilder> new_box_autoadd_ldk_builder_0() {
    return _new_box_autoadd_ldk_builder_0();
  }

  late final _new_box_autoadd_ldk_builder_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LdkBuilder> Function()>>(
          'new_box_autoadd_ldk_builder_0');
  late final _new_box_autoadd_ldk_builder_0 = _new_box_autoadd_ldk_builder_0Ptr
      .asFunction<ffi.Pointer<wire_LdkBuilder> Function()>();

  ffi.Pointer<wire_Mnemonic> new_box_autoadd_mnemonic_0() {
    return _new_box_autoadd_mnemonic_0();
  }

  late final _new_box_autoadd_mnemonic_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Mnemonic> Function()>>(
          'new_box_autoadd_mnemonic_0');
  late final _new_box_autoadd_mnemonic_0 = _new_box_autoadd_mnemonic_0Ptr
      .asFunction<ffi.Pointer<wire_Mnemonic> Function()>();

  ffi.Pointer<wire_NodePointer> new_box_autoadd_node_pointer_0() {
    return _new_box_autoadd_node_pointer_0();
  }

  late final _new_box_autoadd_node_pointer_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NodePointer> Function()>>(
          'new_box_autoadd_node_pointer_0');
  late final _new_box_autoadd_node_pointer_0 =
      _new_box_autoadd_node_pointer_0Ptr
          .asFunction<ffi.Pointer<wire_NodePointer> Function()>();

  ffi.Pointer<wire_PaymentHash> new_box_autoadd_payment_hash_0() {
    return _new_box_autoadd_payment_hash_0();
  }

  late final _new_box_autoadd_payment_hash_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PaymentHash> Function()>>(
          'new_box_autoadd_payment_hash_0');
  late final _new_box_autoadd_payment_hash_0 =
      _new_box_autoadd_payment_hash_0Ptr
          .asFunction<ffi.Pointer<wire_PaymentHash> Function()>();

  ffi.Pointer<wire_PublicKey> new_box_autoadd_public_key_0() {
    return _new_box_autoadd_public_key_0();
  }

  late final _new_box_autoadd_public_key_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PublicKey> Function()>>(
          'new_box_autoadd_public_key_0');
  late final _new_box_autoadd_public_key_0 = _new_box_autoadd_public_key_0Ptr
      .asFunction<ffi.Pointer<wire_PublicKey> Function()>();

  ffi.Pointer<wire_SocketAddress> new_box_autoadd_socket_address_0() {
    return _new_box_autoadd_socket_address_0();
  }

  late final _new_box_autoadd_socket_address_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SocketAddress> Function()>>(
          'new_box_autoadd_socket_address_0');
  late final _new_box_autoadd_socket_address_0 =
      _new_box_autoadd_socket_address_0Ptr
          .asFunction<ffi.Pointer<wire_SocketAddress> Function()>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_list_public_key> new_list_public_key_0(
    int len,
  ) {
    return _new_list_public_key_0(
      len,
    );
  }

  late final _new_list_public_key_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_public_key> Function(
              ffi.Int32)>>('new_list_public_key_0');
  late final _new_list_public_key_0 = _new_list_public_key_0Ptr
      .asFunction<ffi.Pointer<wire_list_public_key> Function(int)>();

  ffi.Pointer<wire_list_socket_address> new_list_socket_address_0(
    int len,
  ) {
    return _new_list_socket_address_0(
      len,
    );
  }

  late final _new_list_socket_address_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_socket_address> Function(
              ffi.Int32)>>('new_list_socket_address_0');
  late final _new_list_socket_address_0 = _new_list_socket_address_0Ptr
      .asFunction<ffi.Pointer<wire_list_socket_address> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_MutexNodeSqliteStore(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexNodeSqliteStore(
      ptr,
    );
  }

  late final _drop_opaque_MutexNodeSqliteStorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_MutexNodeSqliteStore');
  late final _drop_opaque_MutexNodeSqliteStore =
      _drop_opaque_MutexNodeSqliteStorePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexNodeSqliteStore(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexNodeSqliteStore(
      ptr,
    );
  }

  late final _share_opaque_MutexNodeSqliteStorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_MutexNodeSqliteStore');
  late final _share_opaque_MutexNodeSqliteStore =
      _share_opaque_MutexNodeSqliteStorePtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ChainDataSourceConfigKind>
      inflate_ChainDataSourceConfig_Esplora() {
    return _inflate_ChainDataSourceConfig_Esplora();
  }

  late final _inflate_ChainDataSourceConfig_EsploraPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ChainDataSourceConfigKind> Function()>>(
      'inflate_ChainDataSourceConfig_Esplora');
  late final _inflate_ChainDataSourceConfig_Esplora =
      _inflate_ChainDataSourceConfig_EsploraPtr
          .asFunction<ffi.Pointer<ChainDataSourceConfigKind> Function()>();

  ffi.Pointer<EntropySourceConfigKind> inflate_EntropySourceConfig_SeedFile() {
    return _inflate_EntropySourceConfig_SeedFile();
  }

  late final _inflate_EntropySourceConfig_SeedFilePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EntropySourceConfigKind> Function()>>(
      'inflate_EntropySourceConfig_SeedFile');
  late final _inflate_EntropySourceConfig_SeedFile =
      _inflate_EntropySourceConfig_SeedFilePtr
          .asFunction<ffi.Pointer<EntropySourceConfigKind> Function()>();

  ffi.Pointer<EntropySourceConfigKind> inflate_EntropySourceConfig_SeedBytes() {
    return _inflate_EntropySourceConfig_SeedBytes();
  }

  late final _inflate_EntropySourceConfig_SeedBytesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EntropySourceConfigKind> Function()>>(
      'inflate_EntropySourceConfig_SeedBytes');
  late final _inflate_EntropySourceConfig_SeedBytes =
      _inflate_EntropySourceConfig_SeedBytesPtr
          .asFunction<ffi.Pointer<EntropySourceConfigKind> Function()>();

  ffi.Pointer<EntropySourceConfigKind>
      inflate_EntropySourceConfig_Bip39Mnemonic() {
    return _inflate_EntropySourceConfig_Bip39Mnemonic();
  }

  late final _inflate_EntropySourceConfig_Bip39MnemonicPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EntropySourceConfigKind> Function()>>(
      'inflate_EntropySourceConfig_Bip39Mnemonic');
  late final _inflate_EntropySourceConfig_Bip39Mnemonic =
      _inflate_EntropySourceConfig_Bip39MnemonicPtr
          .asFunction<ffi.Pointer<EntropySourceConfigKind> Function()>();

  ffi.Pointer<GossipSourceConfigKind>
      inflate_GossipSourceConfig_RapidGossipSync() {
    return _inflate_GossipSourceConfig_RapidGossipSync();
  }

  late final _inflate_GossipSourceConfig_RapidGossipSyncPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GossipSourceConfigKind> Function()>>(
      'inflate_GossipSourceConfig_RapidGossipSync');
  late final _inflate_GossipSourceConfig_RapidGossipSync =
      _inflate_GossipSourceConfig_RapidGossipSyncPtr
          .asFunction<ffi.Pointer<GossipSourceConfigKind> Function()>();

  ffi.Pointer<MaxDustHTLCExposureKind>
      inflate_MaxDustHTLCExposure_FixedLimitMsat() {
    return _inflate_MaxDustHTLCExposure_FixedLimitMsat();
  }

  late final _inflate_MaxDustHTLCExposure_FixedLimitMsatPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<MaxDustHTLCExposureKind> Function()>>(
      'inflate_MaxDustHTLCExposure_FixedLimitMsat');
  late final _inflate_MaxDustHTLCExposure_FixedLimitMsat =
      _inflate_MaxDustHTLCExposure_FixedLimitMsatPtr
          .asFunction<ffi.Pointer<MaxDustHTLCExposureKind> Function()>();

  ffi.Pointer<MaxDustHTLCExposureKind>
      inflate_MaxDustHTLCExposure_FeeRateMultiplier() {
    return _inflate_MaxDustHTLCExposure_FeeRateMultiplier();
  }

  late final _inflate_MaxDustHTLCExposure_FeeRateMultiplierPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<MaxDustHTLCExposureKind> Function()>>(
      'inflate_MaxDustHTLCExposure_FeeRateMultiplier');
  late final _inflate_MaxDustHTLCExposure_FeeRateMultiplier =
      _inflate_MaxDustHTLCExposure_FeeRateMultiplierPtr
          .asFunction<ffi.Pointer<MaxDustHTLCExposureKind> Function()>();

  ffi.Pointer<SocketAddressKind> inflate_SocketAddress_TcpIpV4() {
    return _inflate_SocketAddress_TcpIpV4();
  }

  late final _inflate_SocketAddress_TcpIpV4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SocketAddressKind> Function()>>(
          'inflate_SocketAddress_TcpIpV4');
  late final _inflate_SocketAddress_TcpIpV4 = _inflate_SocketAddress_TcpIpV4Ptr
      .asFunction<ffi.Pointer<SocketAddressKind> Function()>();

  ffi.Pointer<SocketAddressKind> inflate_SocketAddress_TcpIpV6() {
    return _inflate_SocketAddress_TcpIpV6();
  }

  late final _inflate_SocketAddress_TcpIpV6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SocketAddressKind> Function()>>(
          'inflate_SocketAddress_TcpIpV6');
  late final _inflate_SocketAddress_TcpIpV6 = _inflate_SocketAddress_TcpIpV6Ptr
      .asFunction<ffi.Pointer<SocketAddressKind> Function()>();

  ffi.Pointer<SocketAddressKind> inflate_SocketAddress_OnionV2() {
    return _inflate_SocketAddress_OnionV2();
  }

  late final _inflate_SocketAddress_OnionV2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SocketAddressKind> Function()>>(
          'inflate_SocketAddress_OnionV2');
  late final _inflate_SocketAddress_OnionV2 = _inflate_SocketAddress_OnionV2Ptr
      .asFunction<ffi.Pointer<SocketAddressKind> Function()>();

  ffi.Pointer<SocketAddressKind> inflate_SocketAddress_OnionV3() {
    return _inflate_SocketAddress_OnionV3();
  }

  late final _inflate_SocketAddress_OnionV3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SocketAddressKind> Function()>>(
          'inflate_SocketAddress_OnionV3');
  late final _inflate_SocketAddress_OnionV3 = _inflate_SocketAddress_OnionV3Ptr
      .asFunction<ffi.Pointer<SocketAddressKind> Function()>();

  ffi.Pointer<SocketAddressKind> inflate_SocketAddress_Hostname() {
    return _inflate_SocketAddress_Hostname();
  }

  late final _inflate_SocketAddress_HostnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SocketAddressKind> Function()>>(
          'inflate_SocketAddress_Hostname');
  late final _inflate_SocketAddress_Hostname =
      _inflate_SocketAddress_HostnamePtr
          .asFunction<ffi.Pointer<SocketAddressKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_SocketAddress_TcpIpV4 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> addr;

  @ffi.Uint16()
  external int port;
}

final class wire_SocketAddress_TcpIpV6 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> addr;

  @ffi.Uint16()
  external int port;
}

final class wire_SocketAddress_OnionV2 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_SocketAddress_OnionV3 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> ed25519_pubkey;

  @ffi.Uint16()
  external int checksum;

  @ffi.Uint8()
  external int version;

  @ffi.Uint16()
  external int port;
}

final class wire_SocketAddress_Hostname extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> addr;

  @ffi.Uint16()
  external int port;
}

final class SocketAddressKind extends ffi.Union {
  external ffi.Pointer<wire_SocketAddress_TcpIpV4> TcpIpV4;

  external ffi.Pointer<wire_SocketAddress_TcpIpV6> TcpIpV6;

  external ffi.Pointer<wire_SocketAddress_OnionV2> OnionV2;

  external ffi.Pointer<wire_SocketAddress_OnionV3> OnionV3;

  external ffi.Pointer<wire_SocketAddress_Hostname> Hostname;
}

final class wire_SocketAddress extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SocketAddressKind> kind;
}

final class wire_LdkBuilder extends ffi.Opaque {}

final class wire_list_socket_address extends ffi.Struct {
  external ffi.Pointer<wire_SocketAddress> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_PublicKey extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> hex_code;
}

final class wire_list_public_key extends ffi.Struct {
  external ffi.Pointer<wire_PublicKey> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> storage_dir_path;

  external ffi.Pointer<wire_uint_8_list> log_dir_path;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_list_socket_address> listening_addresses;

  @ffi.Uint32()
  external int default_cltv_expiry_delta;

  @ffi.Uint64()
  external int onchain_wallet_sync_interval_secs;

  @ffi.Uint64()
  external int wallet_sync_interval_secs;

  @ffi.Uint64()
  external int fee_rate_cache_update_interval_secs;

  external ffi.Pointer<wire_list_public_key> trusted_peers_0conf;

  @ffi.Uint64()
  external int probing_liquidity_limit_multiplier;

  @ffi.Int32()
  external int log_level;
}

final class wire_ChainDataSourceConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class ChainDataSourceConfigKind extends ffi.Union {
  external ffi.Pointer<wire_ChainDataSourceConfig_Esplora> Esplora;
}

final class wire_ChainDataSourceConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ChainDataSourceConfigKind> kind;
}

final class wire_EntropySourceConfig_SeedFile extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_EntropySourceConfig_SeedBytes extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_Mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> seed_phrase;
}

final class wire_EntropySourceConfig_Bip39Mnemonic extends ffi.Struct {
  external ffi.Pointer<wire_Mnemonic> mnemonic;

  external ffi.Pointer<wire_uint_8_list> passphrase;
}

final class EntropySourceConfigKind extends ffi.Union {
  external ffi.Pointer<wire_EntropySourceConfig_SeedFile> SeedFile;

  external ffi.Pointer<wire_EntropySourceConfig_SeedBytes> SeedBytes;

  external ffi.Pointer<wire_EntropySourceConfig_Bip39Mnemonic> Bip39Mnemonic;
}

final class wire_EntropySourceConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<EntropySourceConfigKind> kind;
}

final class wire_GossipSourceConfig_P2PNetwork extends ffi.Opaque {}

final class wire_GossipSourceConfig_RapidGossipSync extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class GossipSourceConfigKind extends ffi.Union {
  external ffi.Pointer<wire_GossipSourceConfig_P2PNetwork> P2PNetwork;

  external ffi.Pointer<wire_GossipSourceConfig_RapidGossipSync> RapidGossipSync;
}

final class wire_GossipSourceConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<GossipSourceConfigKind> kind;
}

final class wire_MutexNodeSqliteStore extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_NodePointer extends ffi.Struct {
  external wire_MutexNodeSqliteStore field0;
}

final class wire_Address extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> s;
}

final class wire_MaxDustHTLCExposure_FixedLimitMsat extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class wire_MaxDustHTLCExposure_FeeRateMultiplier extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class MaxDustHTLCExposureKind extends ffi.Union {
  external ffi.Pointer<wire_MaxDustHTLCExposure_FixedLimitMsat> FixedLimitMsat;

  external ffi.Pointer<wire_MaxDustHTLCExposure_FeeRateMultiplier>
      FeeRateMultiplier;
}

final class wire_MaxDustHTLCExposure extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<MaxDustHTLCExposureKind> kind;
}

final class wire_ChannelConfig extends ffi.Struct {
  @ffi.Uint32()
  external int forwarding_fee_proportional_millionths;

  @ffi.Uint32()
  external int forwarding_fee_base_msat;

  @ffi.Uint16()
  external int cltv_expiry_delta;

  external wire_MaxDustHTLCExposure max_dust_htlc_exposure;

  @ffi.Uint64()
  external int force_close_avoidance_max_fee_satoshis;

  @ffi.Bool()
  external bool accept_underpaying_htlcs;
}

final class wire_ChannelId extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> data;
}

final class wire_Bolt11Invoice extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> signed_raw_invoice;
}

final class wire_PaymentHash extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> data;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
