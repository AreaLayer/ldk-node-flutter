// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// Section: imports

use super::*;
use crate::api::node::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<RustOpaqueNom<Node<SqliteStore>>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<Node<SqliteStore>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::types::Address> for wire_cst_address {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Address {
        crate::api::types::Address {
            s: self.s.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::Bolt11Invoice> for wire_cst_bolt_11_invoice {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Bolt11Invoice {
        crate::api::types::Bolt11Invoice {
            signed_raw_invoice: self.signed_raw_invoice.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::Address> for *mut wire_cst_address {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Address {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::Address>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::Bolt11Invoice> for *mut wire_cst_bolt_11_invoice {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Bolt11Invoice {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::Bolt11Invoice>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::ChainDataSourceConfig>
    for *mut wire_cst_chain_data_source_config
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChainDataSourceConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::ChainDataSourceConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::ChannelConfig> for *mut wire_cst_channel_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChannelConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::ChannelConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::ChannelId> for *mut wire_cst_channel_id {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChannelId {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::ChannelId>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::Config> for *mut wire_cst_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Config {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::Config>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::EntropySourceConfig> for *mut wire_cst_entropy_source_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::EntropySourceConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::EntropySourceConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::Event> for *mut wire_cst_event {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Event {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::Event>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::GossipSourceConfig> for *mut wire_cst_gossip_source_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::GossipSourceConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::GossipSourceConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::node::LdkMnemonic> for *mut wire_cst_ldk_mnemonic {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::node::LdkMnemonic {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::node::LdkMnemonic>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::node::LdkNode> for *mut wire_cst_ldk_node {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::node::LdkNode {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::node::LdkNode>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::OutPoint> for *mut wire_cst_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::OutPoint {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::OutPoint>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::PaymentDetails> for *mut wire_cst_payment_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentDetails {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::PaymentDetails>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::PaymentHash> for *mut wire_cst_payment_hash {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentHash {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::PaymentHash>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::PaymentPreimage> for *mut wire_cst_payment_preimage {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentPreimage {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::PaymentPreimage>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::PaymentSecret> for *mut wire_cst_payment_secret {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentSecret {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::PaymentSecret>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::PublicKey> for *mut wire_cst_public_key {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PublicKey {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::PublicKey>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::SocketAddress> for *mut wire_cst_socket_address {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::SocketAddress {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::SocketAddress>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u32> for *mut u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u64> for *mut u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::types::UserChannelId> for *mut wire_cst_user_channel_id {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::UserChannelId {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::UserChannelId>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::ChainDataSourceConfig> for wire_cst_chain_data_source_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChainDataSourceConfig {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Esplora };
                crate::api::types::ChainDataSourceConfig::Esplora(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::types::ChannelConfig> for wire_cst_channel_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChannelConfig {
        crate::api::types::ChannelConfig {
            forwarding_fee_proportional_millionths: self
                .forwarding_fee_proportional_millionths
                .cst_decode(),
            forwarding_fee_base_msat: self.forwarding_fee_base_msat.cst_decode(),
            cltv_expiry_delta: self.cltv_expiry_delta.cst_decode(),
            max_dust_htlc_exposure: self.max_dust_htlc_exposure.cst_decode(),
            force_close_avoidance_max_fee_satoshis: self
                .force_close_avoidance_max_fee_satoshis
                .cst_decode(),
            accept_underpaying_htlcs: self.accept_underpaying_htlcs.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::ChannelDetails> for wire_cst_channel_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChannelDetails {
        crate::api::types::ChannelDetails {
            channel_id: self.channel_id.cst_decode(),
            counterparty_node_id: self.counterparty_node_id.cst_decode(),
            funding_txo: self.funding_txo.cst_decode(),
            channel_value_sats: self.channel_value_sats.cst_decode(),
            unspendable_punishment_reserve: self.unspendable_punishment_reserve.cst_decode(),
            user_channel_id: self.user_channel_id.cst_decode(),
            feerate_sat_per_1000_weight: self.feerate_sat_per_1000_weight.cst_decode(),
            balance_msat: self.balance_msat.cst_decode(),
            outbound_capacity_msat: self.outbound_capacity_msat.cst_decode(),
            inbound_capacity_msat: self.inbound_capacity_msat.cst_decode(),
            confirmations_required: self.confirmations_required.cst_decode(),
            confirmations: self.confirmations.cst_decode(),
            is_outbound: self.is_outbound.cst_decode(),
            is_channel_ready: self.is_channel_ready.cst_decode(),
            is_usable: self.is_usable.cst_decode(),
            is_public: self.is_public.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::ChannelId> for wire_cst_channel_id {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::ChannelId {
        crate::api::types::ChannelId {
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::Config> for wire_cst_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Config {
        crate::api::types::Config {
            storage_dir_path: self.storage_dir_path.cst_decode(),
            log_dir_path: self.log_dir_path.cst_decode(),
            network: self.network.cst_decode(),
            listening_addresses: self.listening_addresses.cst_decode(),
            default_cltv_expiry_delta: self.default_cltv_expiry_delta.cst_decode(),
            onchain_wallet_sync_interval_secs: self.onchain_wallet_sync_interval_secs.cst_decode(),
            wallet_sync_interval_secs: self.wallet_sync_interval_secs.cst_decode(),
            fee_rate_cache_update_interval_secs: self
                .fee_rate_cache_update_interval_secs
                .cst_decode(),
            trusted_peers_0conf: self.trusted_peers_0conf.cst_decode(),
            probing_liquidity_limit_multiplier: self
                .probing_liquidity_limit_multiplier
                .cst_decode(),
            log_level: self.log_level.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::EntropySourceConfig> for wire_cst_entropy_source_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::EntropySourceConfig {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.SeedFile };
                crate::api::types::EntropySourceConfig::SeedFile(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.SeedBytes };
                crate::api::types::EntropySourceConfig::SeedBytes(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.Bip39Mnemonic };
                crate::api::types::EntropySourceConfig::Bip39Mnemonic {
                    mnemonic: ans.mnemonic.cst_decode(),
                    passphrase: ans.passphrase.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::types::Event> for wire_cst_event {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Event {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.PaymentSuccessful };
                crate::api::types::Event::PaymentSuccessful {
                    payment_hash: ans.payment_hash.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.PaymentFailed };
                crate::api::types::Event::PaymentFailed {
                    payment_hash: ans.payment_hash.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.PaymentReceived };
                crate::api::types::Event::PaymentReceived {
                    payment_hash: ans.payment_hash.cst_decode(),
                    amount_msat: ans.amount_msat.cst_decode(),
                }
            }
            3 => {
                let ans = unsafe { self.kind.ChannelReady };
                crate::api::types::Event::ChannelReady {
                    channel_id: ans.channel_id.cst_decode(),
                    user_channel_id: ans.user_channel_id.cst_decode(),
                    counterparty_node_id: ans.counterparty_node_id.cst_decode(),
                }
            }
            4 => {
                let ans = unsafe { self.kind.ChannelClosed };
                crate::api::types::Event::ChannelClosed {
                    channel_id: ans.channel_id.cst_decode(),
                    user_channel_id: ans.user_channel_id.cst_decode(),
                    counterparty_node_id: ans.counterparty_node_id.cst_decode(),
                }
            }
            5 => {
                let ans = unsafe { self.kind.ChannelPending };
                crate::api::types::Event::ChannelPending {
                    channel_id: ans.channel_id.cst_decode(),
                    user_channel_id: ans.user_channel_id.cst_decode(),
                    former_temporary_channel_id: ans.former_temporary_channel_id.cst_decode(),
                    counterparty_node_id: ans.counterparty_node_id.cst_decode(),
                    funding_txo: ans.funding_txo.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::types::GossipSourceConfig> for wire_cst_gossip_source_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::GossipSourceConfig {
        match self.tag {
            0 => crate::api::types::GossipSourceConfig::P2PNetwork,
            1 => {
                let ans = unsafe { self.kind.RapidGossipSync };
                crate::api::types::GossipSourceConfig::RapidGossipSync(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::node::LdkMnemonic> for wire_cst_ldk_mnemonic {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::node::LdkMnemonic {
        crate::api::node::LdkMnemonic {
            seed_phrase: self.seed_phrase.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::node::LdkNode> for wire_cst_ldk_node {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::node::LdkNode {
        crate::api::node::LdkNode {
            ptr: self.ptr.cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::api::types::ChannelDetails>> for *mut wire_cst_list_channel_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::types::ChannelDetails> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::types::PaymentDetails>> for *mut wire_cst_list_payment_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::types::PaymentDetails> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::types::PeerDetails>> for *mut wire_cst_list_peer_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::types::PeerDetails> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<crate::api::types::PublicKey>> for *mut wire_cst_list_public_key {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::types::PublicKey> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::types::SocketAddress>> for *mut wire_cst_list_socket_address {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::types::SocketAddress> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::api::types::MaxDustHTLCExposure> for wire_cst_max_dust_htlc_exposure {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::MaxDustHTLCExposure {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.FixedLimitMsat };
                crate::api::types::MaxDustHTLCExposure::FixedLimitMsat(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.FeeRateMultiplier };
                crate::api::types::MaxDustHTLCExposure::FeeRateMultiplier(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::types::OutPoint> for wire_cst_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::OutPoint {
        crate::api::types::OutPoint {
            txid: self.txid.cst_decode(),
            vout: self.vout.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::PaymentDetails> for wire_cst_payment_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentDetails {
        crate::api::types::PaymentDetails {
            hash: self.hash.cst_decode(),
            preimage: self.preimage.cst_decode(),
            secret: self.secret.cst_decode(),
            amount_msat: self.amount_msat.cst_decode(),
            direction: self.direction.cst_decode(),
            status: self.status.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::PaymentHash> for wire_cst_payment_hash {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentHash {
        crate::api::types::PaymentHash {
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::PaymentPreimage> for wire_cst_payment_preimage {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentPreimage {
        crate::api::types::PaymentPreimage {
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::PaymentSecret> for wire_cst_payment_secret {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PaymentSecret {
        crate::api::types::PaymentSecret {
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::PeerDetails> for wire_cst_peer_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PeerDetails {
        crate::api::types::PeerDetails {
            node_id: self.node_id.cst_decode(),
            address: self.address.cst_decode(),
            is_connected: self.is_connected.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::PublicKey> for wire_cst_public_key {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PublicKey {
        crate::api::types::PublicKey {
            hex: self.hex.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::SocketAddress> for wire_cst_socket_address {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::SocketAddress {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.TcpIpV4 };
                crate::api::types::SocketAddress::TcpIpV4 {
                    addr: ans.addr.cst_decode(),
                    port: ans.port.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.TcpIpV6 };
                crate::api::types::SocketAddress::TcpIpV6 {
                    addr: ans.addr.cst_decode(),
                    port: ans.port.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.OnionV2 };
                crate::api::types::SocketAddress::OnionV2(ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.OnionV3 };
                crate::api::types::SocketAddress::OnionV3 {
                    ed25519_pubkey: ans.ed25519_pubkey.cst_decode(),
                    checksum: ans.checksum.cst_decode(),
                    version: ans.version.cst_decode(),
                    port: ans.port.cst_decode(),
                }
            }
            4 => {
                let ans = unsafe { self.kind.Hostname };
                crate::api::types::SocketAddress::Hostname {
                    addr: ans.addr.cst_decode(),
                    port: ans.port.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::types::Txid> for wire_cst_txid {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Txid {
        crate::api::types::Txid {
            hash: self.hash.cst_decode(),
        }
    }
}
impl CstDecode<[u8; 12]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 12] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 16]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 16] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 32]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 32] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 4]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 4] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 64]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 64] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::types::UserChannelId> for wire_cst_user_channel_id {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::UserChannelId {
        crate::api::types::UserChannelId {
            data: self.data.cst_decode(),
        }
    }
}
impl NewWithNullPtr for wire_cst_address {
    fn new_with_null_ptr() -> Self {
        Self {
            s: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_address {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_bolt_11_invoice {
    fn new_with_null_ptr() -> Self {
        Self {
            signed_raw_invoice: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_bolt_11_invoice {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_chain_data_source_config {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: ChainDataSourceConfigKind { nil__: () },
        }
    }
}
impl Default for wire_cst_chain_data_source_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_channel_config {
    fn new_with_null_ptr() -> Self {
        Self {
            forwarding_fee_proportional_millionths: Default::default(),
            forwarding_fee_base_msat: Default::default(),
            cltv_expiry_delta: Default::default(),
            max_dust_htlc_exposure: Default::default(),
            force_close_avoidance_max_fee_satoshis: Default::default(),
            accept_underpaying_htlcs: Default::default(),
        }
    }
}
impl Default for wire_cst_channel_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_channel_details {
    fn new_with_null_ptr() -> Self {
        Self {
            channel_id: Default::default(),
            counterparty_node_id: Default::default(),
            funding_txo: core::ptr::null_mut(),
            channel_value_sats: Default::default(),
            unspendable_punishment_reserve: core::ptr::null_mut(),
            user_channel_id: Default::default(),
            feerate_sat_per_1000_weight: Default::default(),
            balance_msat: Default::default(),
            outbound_capacity_msat: Default::default(),
            inbound_capacity_msat: Default::default(),
            confirmations_required: core::ptr::null_mut(),
            confirmations: core::ptr::null_mut(),
            is_outbound: Default::default(),
            is_channel_ready: Default::default(),
            is_usable: Default::default(),
            is_public: Default::default(),
        }
    }
}
impl Default for wire_cst_channel_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_channel_id {
    fn new_with_null_ptr() -> Self {
        Self {
            data: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_channel_id {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_config {
    fn new_with_null_ptr() -> Self {
        Self {
            storage_dir_path: core::ptr::null_mut(),
            log_dir_path: core::ptr::null_mut(),
            network: Default::default(),
            listening_addresses: core::ptr::null_mut(),
            default_cltv_expiry_delta: Default::default(),
            onchain_wallet_sync_interval_secs: Default::default(),
            wallet_sync_interval_secs: Default::default(),
            fee_rate_cache_update_interval_secs: Default::default(),
            trusted_peers_0conf: core::ptr::null_mut(),
            probing_liquidity_limit_multiplier: Default::default(),
            log_level: Default::default(),
        }
    }
}
impl Default for wire_cst_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_entropy_source_config {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EntropySourceConfigKind { nil__: () },
        }
    }
}
impl Default for wire_cst_entropy_source_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_event {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: EventKind { nil__: () },
        }
    }
}
impl Default for wire_cst_event {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_gossip_source_config {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: GossipSourceConfigKind { nil__: () },
        }
    }
}
impl Default for wire_cst_gossip_source_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ldk_mnemonic {
    fn new_with_null_ptr() -> Self {
        Self {
            seed_phrase: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ldk_mnemonic {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ldk_node {
    fn new_with_null_ptr() -> Self {
        Self {
            ptr: Default::default(),
        }
    }
}
impl Default for wire_cst_ldk_node {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_max_dust_htlc_exposure {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: MaxDustHTLCExposureKind { nil__: () },
        }
    }
}
impl Default for wire_cst_max_dust_htlc_exposure {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_out_point {
    fn new_with_null_ptr() -> Self {
        Self {
            txid: Default::default(),
            vout: Default::default(),
        }
    }
}
impl Default for wire_cst_out_point {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payment_details {
    fn new_with_null_ptr() -> Self {
        Self {
            hash: Default::default(),
            preimage: core::ptr::null_mut(),
            secret: core::ptr::null_mut(),
            amount_msat: core::ptr::null_mut(),
            direction: Default::default(),
            status: Default::default(),
        }
    }
}
impl Default for wire_cst_payment_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payment_hash {
    fn new_with_null_ptr() -> Self {
        Self {
            data: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_payment_hash {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payment_preimage {
    fn new_with_null_ptr() -> Self {
        Self {
            data: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_payment_preimage {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payment_secret {
    fn new_with_null_ptr() -> Self {
        Self {
            data: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_payment_secret {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_peer_details {
    fn new_with_null_ptr() -> Self {
        Self {
            node_id: Default::default(),
            address: Default::default(),
            is_connected: Default::default(),
        }
    }
}
impl Default for wire_cst_peer_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_public_key {
    fn new_with_null_ptr() -> Self {
        Self {
            hex: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_public_key {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_socket_address {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: SocketAddressKind { nil__: () },
        }
    }
}
impl Default for wire_cst_socket_address {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_txid {
    fn new_with_null_ptr() -> Self {
        Self {
            hash: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_txid {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_user_channel_id {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
        }
    }
}
impl Default for wire_cst_user_channel_id {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_build_with_sqlite_store(
    port_: i64,
    config: *mut wire_cst_config,
    chain_data_source_config: *mut wire_cst_chain_data_source_config,
    entropy_source_config: *mut wire_cst_entropy_source_config,
    gossip_source_config: *mut wire_cst_gossip_source_config,
) {
    wire_build_with_sqlite_store_impl(
        port_,
        config,
        chain_data_source_config,
        entropy_source_config,
        gossip_source_config,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_mnemonic_generate(port_: i64) {
    wire_ldk_mnemonic_generate_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_close_channel(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    channel_id: *mut wire_cst_channel_id,
    counterparty_node_id: *mut wire_cst_public_key,
) {
    wire_ldk_node_close_channel_impl(port_, that, channel_id, counterparty_node_id)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_connect(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    node_id: *mut wire_cst_public_key,
    address: *mut wire_cst_socket_address,
    persist: bool,
) {
    wire_ldk_node_connect_impl(port_, that, node_id, address, persist)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_connect_open_channel(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    socket_address: *mut wire_cst_socket_address,
    node_id: *mut wire_cst_public_key,
    channel_amount_sats: u64,
    push_to_counterparty_msat: *mut u64,
    announce_channel: bool,
    channel_config: *mut wire_cst_channel_config,
) {
    wire_ldk_node_connect_open_channel_impl(
        port_,
        that,
        socket_address,
        node_id,
        channel_amount_sats,
        push_to_counterparty_msat,
        announce_channel,
        channel_config,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_disconnect(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    counterparty_node_id: *mut wire_cst_public_key,
) {
    wire_ldk_node_disconnect_impl(port_, that, counterparty_node_id)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_event_handled(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_event_handled_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_is_running(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_is_running_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_list_channels(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_list_channels_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_list_payments(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_list_payments_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_list_payments_with_filter(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    payment_direction: i32,
) {
    wire_ldk_node_list_payments_with_filter_impl(port_, that, payment_direction)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_list_peers(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_list_peers_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_listening_addresses(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_listening_addresses_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_new_onchain_address(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_new_onchain_address_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_next_event(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_next_event_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_node_id(port_: i64, that: *mut wire_cst_ldk_node) {
    wire_ldk_node_node_id_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_payment(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    payment_hash: *mut wire_cst_payment_hash,
) {
    wire_ldk_node_payment_impl(port_, that, payment_hash)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_receive_payment(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    amount_msat: u64,
    description: *mut wire_cst_list_prim_u_8_strict,
    expiry_secs: u32,
) {
    wire_ldk_node_receive_payment_impl(port_, that, amount_msat, description, expiry_secs)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_receive_variable_amount_payment(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    description: *mut wire_cst_list_prim_u_8_strict,
    expiry_secs: u32,
) {
    wire_ldk_node_receive_variable_amount_payment_impl(port_, that, description, expiry_secs)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_remove_payment(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    payment_hash: *mut wire_cst_payment_hash,
) {
    wire_ldk_node_remove_payment_impl(port_, that, payment_hash)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_all_to_onchain_address(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    address: *mut wire_cst_address,
) {
    wire_ldk_node_send_all_to_onchain_address_impl(port_, that, address)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_payment(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    invoice: *mut wire_cst_bolt_11_invoice,
) {
    wire_ldk_node_send_payment_impl(port_, that, invoice)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_payment_probes(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    invoice: *mut wire_cst_bolt_11_invoice,
) {
    wire_ldk_node_send_payment_probes_impl(port_, that, invoice)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_payment_probes_using_amount(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    invoice: *mut wire_cst_bolt_11_invoice,
    amount_msat: u64,
) {
    wire_ldk_node_send_payment_probes_using_amount_impl(port_, that, invoice, amount_msat)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_payment_using_amount(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    invoice: *mut wire_cst_bolt_11_invoice,
    amount_msat: u64,
) {
    wire_ldk_node_send_payment_using_amount_impl(port_, that, invoice, amount_msat)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_spontaneous_payment(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    amount_msat: u64,
    node_id: *mut wire_cst_public_key,
) {
    wire_ldk_node_send_spontaneous_payment_impl(port_, that, amount_msat, node_id)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_spontaneous_payment_probes(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    amount_msat: u64,
    node_id: *mut wire_cst_public_key,
) {
    wire_ldk_node_send_spontaneous_payment_probes_impl(port_, that, amount_msat, node_id)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_send_to_onchain_address(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    address: *mut wire_cst_address,
    amount_sats: u64,
) {
    wire_ldk_node_send_to_onchain_address_impl(port_, that, address, amount_sats)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_sign_message(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    msg: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_ldk_node_sign_message_impl(port_, that, msg)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_spendable_onchain_balance_sats(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_spendable_onchain_balance_sats_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_start(port_: i64, that: *mut wire_cst_ldk_node) {
    wire_ldk_node_start_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_stop(port_: i64, that: *mut wire_cst_ldk_node) {
    wire_ldk_node_stop_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_sync_wallets(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_sync_wallets_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_total_onchain_balance_sats(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_total_onchain_balance_sats_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_update_channel_config(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    channel_id: *mut wire_cst_channel_id,
    counterparty_node_id: *mut wire_cst_public_key,
    channel_config: *mut wire_cst_channel_config,
) {
    wire_ldk_node_update_channel_config_impl(
        port_,
        that,
        channel_id,
        counterparty_node_id,
        channel_config,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_verify_signature(
    port_: i64,
    that: *mut wire_cst_ldk_node,
    msg: *mut wire_cst_list_prim_u_8_loose,
    sig: *mut wire_cst_list_prim_u_8_strict,
    pkey: *mut wire_cst_public_key,
) {
    wire_ldk_node_verify_signature_impl(port_, that, msg, sig, pkey)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_ldk_node_wait_next_event(
    port_: i64,
    that: *mut wire_cst_ldk_node,
) {
    wire_ldk_node_wait_next_event_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_socket_address_as_string(
    port_: i64,
    that: *mut wire_cst_socket_address,
) {
    wire_socket_address_as_string_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_wire_socket_address_from_str(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_socket_address_from_str_impl(port_, address)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_rust_arc_increment_strong_count_RustOpaque_NodeSqliteStore(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Node<SqliteStore>>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_rust_arc_decrement_strong_count_RustOpaque_NodeSqliteStore(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<Node<SqliteStore>>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_address() -> *mut wire_cst_address {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_address::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_bolt_11_invoice(
) -> *mut wire_cst_bolt_11_invoice {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_bolt_11_invoice::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_chain_data_source_config(
) -> *mut wire_cst_chain_data_source_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_chain_data_source_config::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_channel_config(
) -> *mut wire_cst_channel_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_channel_config::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_channel_id() -> *mut wire_cst_channel_id {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_channel_id::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_config() -> *mut wire_cst_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_config::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_entropy_source_config(
) -> *mut wire_cst_entropy_source_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_entropy_source_config::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_event() -> *mut wire_cst_event {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_event::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_gossip_source_config(
) -> *mut wire_cst_gossip_source_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_gossip_source_config::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_ldk_mnemonic() -> *mut wire_cst_ldk_mnemonic {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ldk_mnemonic::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_ldk_node() -> *mut wire_cst_ldk_node {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ldk_node::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_out_point() -> *mut wire_cst_out_point {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_out_point::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_payment_details(
) -> *mut wire_cst_payment_details {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_payment_details::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_payment_hash() -> *mut wire_cst_payment_hash {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_payment_hash::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_payment_preimage(
) -> *mut wire_cst_payment_preimage {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_payment_preimage::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_payment_secret(
) -> *mut wire_cst_payment_secret {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_payment_secret::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_public_key() -> *mut wire_cst_public_key {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_public_key::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_socket_address(
) -> *mut wire_cst_socket_address {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_socket_address::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_box_autoadd_user_channel_id(
) -> *mut wire_cst_user_channel_id {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_user_channel_id::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_list_channel_details(
    len: i32,
) -> *mut wire_cst_list_channel_details {
    let wrap = wire_cst_list_channel_details {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_channel_details>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_list_payment_details(
    len: i32,
) -> *mut wire_cst_list_payment_details {
    let wrap = wire_cst_list_payment_details {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_payment_details>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_list_peer_details(
    len: i32,
) -> *mut wire_cst_list_peer_details {
    let wrap = wire_cst_list_peer_details {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_peer_details>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_list_prim_u_8_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_loose {
    let ans = wire_cst_list_prim_u_8_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_list_public_key(
    len: i32,
) -> *mut wire_cst_list_public_key {
    let wrap = wire_cst_list_public_key {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_public_key>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_ldk_node_cst_new_list_socket_address(
    len: i32,
) -> *mut wire_cst_list_socket_address {
    let wrap = wire_cst_list_socket_address {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_socket_address>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_address {
    s: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_bolt_11_invoice {
    signed_raw_invoice: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_chain_data_source_config {
    tag: i32,
    kind: ChainDataSourceConfigKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union ChainDataSourceConfigKind {
    Esplora: wire_cst_ChainDataSourceConfig_Esplora,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ChainDataSourceConfig_Esplora {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_channel_config {
    forwarding_fee_proportional_millionths: u32,
    forwarding_fee_base_msat: u32,
    cltv_expiry_delta: u16,
    max_dust_htlc_exposure: wire_cst_max_dust_htlc_exposure,
    force_close_avoidance_max_fee_satoshis: u64,
    accept_underpaying_htlcs: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_channel_details {
    channel_id: wire_cst_channel_id,
    counterparty_node_id: wire_cst_public_key,
    funding_txo: *mut wire_cst_list_prim_u_8_strict,
    channel_value_sats: u64,
    unspendable_punishment_reserve: *mut u64,
    user_channel_id: wire_cst_user_channel_id,
    feerate_sat_per_1000_weight: u32,
    balance_msat: u64,
    outbound_capacity_msat: u64,
    inbound_capacity_msat: u64,
    confirmations_required: *mut u32,
    confirmations: *mut u32,
    is_outbound: bool,
    is_channel_ready: bool,
    is_usable: bool,
    is_public: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_channel_id {
    data: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_config {
    storage_dir_path: *mut wire_cst_list_prim_u_8_strict,
    log_dir_path: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    listening_addresses: *mut wire_cst_list_socket_address,
    default_cltv_expiry_delta: u32,
    onchain_wallet_sync_interval_secs: u64,
    wallet_sync_interval_secs: u64,
    fee_rate_cache_update_interval_secs: u64,
    trusted_peers_0conf: *mut wire_cst_list_public_key,
    probing_liquidity_limit_multiplier: u64,
    log_level: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_entropy_source_config {
    tag: i32,
    kind: EntropySourceConfigKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EntropySourceConfigKind {
    SeedFile: wire_cst_EntropySourceConfig_SeedFile,
    SeedBytes: wire_cst_EntropySourceConfig_SeedBytes,
    Bip39Mnemonic: wire_cst_EntropySourceConfig_Bip39Mnemonic,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EntropySourceConfig_SeedFile {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EntropySourceConfig_SeedBytes {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_EntropySourceConfig_Bip39Mnemonic {
    mnemonic: *mut wire_cst_ldk_mnemonic,
    passphrase: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_event {
    tag: i32,
    kind: EventKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union EventKind {
    PaymentSuccessful: wire_cst_Event_PaymentSuccessful,
    PaymentFailed: wire_cst_Event_PaymentFailed,
    PaymentReceived: wire_cst_Event_PaymentReceived,
    ChannelReady: wire_cst_Event_ChannelReady,
    ChannelClosed: wire_cst_Event_ChannelClosed,
    ChannelPending: wire_cst_Event_ChannelPending,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Event_PaymentSuccessful {
    payment_hash: *mut wire_cst_payment_hash,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Event_PaymentFailed {
    payment_hash: *mut wire_cst_payment_hash,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Event_PaymentReceived {
    payment_hash: *mut wire_cst_payment_hash,
    amount_msat: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Event_ChannelReady {
    channel_id: *mut wire_cst_channel_id,
    user_channel_id: *mut wire_cst_user_channel_id,
    counterparty_node_id: *mut wire_cst_public_key,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Event_ChannelClosed {
    channel_id: *mut wire_cst_channel_id,
    user_channel_id: *mut wire_cst_user_channel_id,
    counterparty_node_id: *mut wire_cst_public_key,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Event_ChannelPending {
    channel_id: *mut wire_cst_channel_id,
    user_channel_id: *mut wire_cst_user_channel_id,
    former_temporary_channel_id: *mut wire_cst_channel_id,
    counterparty_node_id: *mut wire_cst_public_key,
    funding_txo: *mut wire_cst_out_point,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_gossip_source_config {
    tag: i32,
    kind: GossipSourceConfigKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union GossipSourceConfigKind {
    RapidGossipSync: wire_cst_GossipSourceConfig_RapidGossipSync,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_GossipSourceConfig_RapidGossipSync {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ldk_mnemonic {
    seed_phrase: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ldk_node {
    ptr: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_channel_details {
    ptr: *mut wire_cst_channel_details,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_payment_details {
    ptr: *mut wire_cst_payment_details,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_peer_details {
    ptr: *mut wire_cst_peer_details,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_loose {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_public_key {
    ptr: *mut wire_cst_public_key,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_socket_address {
    ptr: *mut wire_cst_socket_address,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_max_dust_htlc_exposure {
    tag: i32,
    kind: MaxDustHTLCExposureKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union MaxDustHTLCExposureKind {
    FixedLimitMsat: wire_cst_MaxDustHTLCExposure_FixedLimitMsat,
    FeeRateMultiplier: wire_cst_MaxDustHTLCExposure_FeeRateMultiplier,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MaxDustHTLCExposure_FixedLimitMsat {
    field0: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_MaxDustHTLCExposure_FeeRateMultiplier {
    field0: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_out_point {
    txid: wire_cst_txid,
    vout: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payment_details {
    hash: wire_cst_payment_hash,
    preimage: *mut wire_cst_payment_preimage,
    secret: *mut wire_cst_payment_secret,
    amount_msat: *mut u64,
    direction: i32,
    status: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payment_hash {
    data: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payment_preimage {
    data: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payment_secret {
    data: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_peer_details {
    node_id: wire_cst_public_key,
    address: wire_cst_socket_address,
    is_connected: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_public_key {
    hex: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_socket_address {
    tag: i32,
    kind: SocketAddressKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union SocketAddressKind {
    TcpIpV4: wire_cst_SocketAddress_TcpIpV4,
    TcpIpV6: wire_cst_SocketAddress_TcpIpV6,
    OnionV2: wire_cst_SocketAddress_OnionV2,
    OnionV3: wire_cst_SocketAddress_OnionV3,
    Hostname: wire_cst_SocketAddress_Hostname,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SocketAddress_TcpIpV4 {
    addr: *mut wire_cst_list_prim_u_8_strict,
    port: u16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SocketAddress_TcpIpV6 {
    addr: *mut wire_cst_list_prim_u_8_strict,
    port: u16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SocketAddress_OnionV2 {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SocketAddress_OnionV3 {
    ed25519_pubkey: *mut wire_cst_list_prim_u_8_strict,
    checksum: u16,
    version: u8,
    port: u16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SocketAddress_Hostname {
    addr: *mut wire_cst_list_prim_u_8_strict,
    port: u16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_txid {
    hash: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_user_channel_id {
    data: u64,
}
