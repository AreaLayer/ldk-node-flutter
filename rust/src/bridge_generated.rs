#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.

use crate::ldk::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::types::Address;
use crate::types::ChainDataSourceConfig;
use crate::types::ChannelConfig;
use crate::types::ChannelDetails;
use crate::types::ChannelId;
use crate::types::Config;
use crate::types::EntropySourceConfig;
use crate::types::Event;
use crate::types::GossipSourceConfig;
use crate::types::Invoice;
use crate::types::LogLevel;
use crate::types::Mnemonic;
use crate::types::NetAddress;
use crate::types::Network;
use crate::types::OutPoint;
use crate::types::PaymentDetails;
use crate::types::PaymentDirection;
use crate::types::PaymentHash;
use crate::types::PaymentPreimage;
use crate::types::PaymentSecret;
use crate::types::PaymentStatus;
use crate::types::PeerDetails;
use crate::types::PublicKey;
use crate::types::Txid;
use crate::types::UserChannelId;

// Section: wire functions

fn wire_generate_entropy_mnemonic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "generate_entropy_mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(generate_entropy_mnemonic()),
    )
}
fn wire_build_node_impl(
    port_: MessagePort,
    config: impl Wire2Api<Config> + UnwindSafe,
    chain_data_source_config: impl Wire2Api<Option<ChainDataSourceConfig>> + UnwindSafe,
    entropy_source_config: impl Wire2Api<Option<EntropySourceConfig>> + UnwindSafe,
    gossip_source_config: impl Wire2Api<Option<GossipSourceConfig>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "build_node",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_config = config.wire2api();
            let api_chain_data_source_config = chain_data_source_config.wire2api();
            let api_entropy_source_config = entropy_source_config.wire2api();
            let api_gossip_source_config = gossip_source_config.wire2api();
            move |task_callback| {
                build_node(
                    api_config,
                    api_chain_data_source_config,
                    api_entropy_source_config,
                    api_gossip_source_config,
                )
            }
        },
    )
}
fn wire_start__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "start__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::start(&api_that)
        },
    )
}
fn wire_stop__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stop__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::stop(&api_that)
        },
    )
}
fn wire_event_handled__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "event_handled__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::event_handled(&api_that)
        },
    )
}
fn wire_next_event__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "next_event__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(NodePointer::next_event(&api_that))
        },
    )
}
fn wire_wait_until_next_event__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "wait_until_next_event__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(NodePointer::wait_until_next_event(&api_that))
        },
    )
}
fn wire_node_id__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "node_id__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::node_id(&api_that)
        },
    )
}
fn wire_listening_address__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "listening_address__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(NodePointer::listening_address(&api_that))
        },
    )
}
fn wire_new_onchain_address__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new_onchain_address__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::new_onchain_address(&api_that)
        },
    )
}
fn wire_spendable_onchain_balance_sats__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "spendable_onchain_balance_sats__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::spendable_onchain_balance_sats(&api_that)
        },
    )
}
fn wire_total_onchain_balance_sats__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "total_onchain_balance_sats__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::total_onchain_balance_sats(&api_that)
        },
    )
}
fn wire_send_to_onchain_address__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    address: impl Wire2Api<Address> + UnwindSafe,
    amount_sats: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_to_onchain_address__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            let api_amount_sats = amount_sats.wire2api();
            move |task_callback| {
                NodePointer::send_to_onchain_address(&api_that, api_address, api_amount_sats)
            }
        },
    )
}
fn wire_send_all_to_onchain_address__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    address: impl Wire2Api<Address> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_all_to_onchain_address__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            move |task_callback| NodePointer::send_all_to_onchain_address(&api_that, api_address)
        },
    )
}
fn wire_list_channels__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_channels__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(NodePointer::list_channels(&api_that))
        },
    )
}
fn wire_connect__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    node_id: impl Wire2Api<PublicKey> + UnwindSafe,
    address: impl Wire2Api<NetAddress> + UnwindSafe,
    persist: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_node_id = node_id.wire2api();
            let api_address = address.wire2api();
            let api_persist = persist.wire2api();
            move |task_callback| {
                NodePointer::connect(&api_that, api_node_id, api_address, api_persist)
            }
        },
    )
}
fn wire_disconnect__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    counterparty_node_id: impl Wire2Api<PublicKey> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disconnect__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_counterparty_node_id = counterparty_node_id.wire2api();
            move |task_callback| NodePointer::disconnect(&api_that, api_counterparty_node_id)
        },
    )
}
fn wire_connect_open_channel__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    address: impl Wire2Api<NetAddress> + UnwindSafe,
    node_id: impl Wire2Api<PublicKey> + UnwindSafe,
    channel_amount_sats: impl Wire2Api<u64> + UnwindSafe,
    push_to_counterparty_msat: impl Wire2Api<Option<u64>> + UnwindSafe,
    announce_channel: impl Wire2Api<bool> + UnwindSafe,
    channel_config: impl Wire2Api<Option<ChannelConfig>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect_open_channel__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_address = address.wire2api();
            let api_node_id = node_id.wire2api();
            let api_channel_amount_sats = channel_amount_sats.wire2api();
            let api_push_to_counterparty_msat = push_to_counterparty_msat.wire2api();
            let api_announce_channel = announce_channel.wire2api();
            let api_channel_config = channel_config.wire2api();
            move |task_callback| {
                NodePointer::connect_open_channel(
                    &api_that,
                    api_address,
                    api_node_id,
                    api_channel_amount_sats,
                    api_push_to_counterparty_msat,
                    api_announce_channel,
                    api_channel_config,
                )
            }
        },
    )
}
fn wire_sync_wallets__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sync_wallets__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| NodePointer::sync_wallets(&api_that)
        },
    )
}
fn wire_close_channel__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    channel_id: impl Wire2Api<ChannelId> + UnwindSafe,
    counterparty_node_id: impl Wire2Api<PublicKey> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "close_channel__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_channel_id = channel_id.wire2api();
            let api_counterparty_node_id = counterparty_node_id.wire2api();
            move |task_callback| {
                NodePointer::close_channel(&api_that, api_channel_id, api_counterparty_node_id)
            }
        },
    )
}
fn wire_update_channel_config__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    channel_id: impl Wire2Api<ChannelId> + UnwindSafe,
    counterparty_node_id: impl Wire2Api<PublicKey> + UnwindSafe,
    channel_config: impl Wire2Api<ChannelConfig> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_channel_config__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_channel_id = channel_id.wire2api();
            let api_counterparty_node_id = counterparty_node_id.wire2api();
            let api_channel_config = channel_config.wire2api();
            move |task_callback| {
                NodePointer::update_channel_config(
                    &api_that,
                    api_channel_id,
                    api_counterparty_node_id,
                    api_channel_config,
                )
            }
        },
    )
}
fn wire_send_payment__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    invoice: impl Wire2Api<Invoice> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_payment__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_invoice = invoice.wire2api();
            move |task_callback| NodePointer::send_payment(&api_that, api_invoice)
        },
    )
}
fn wire_send_payment_using_amount__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    invoice: impl Wire2Api<Invoice> + UnwindSafe,
    amount_msat: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_payment_using_amount__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_invoice = invoice.wire2api();
            let api_amount_msat = amount_msat.wire2api();
            move |task_callback| {
                NodePointer::send_payment_using_amount(&api_that, api_invoice, api_amount_msat)
            }
        },
    )
}
fn wire_send_spontaneous_payment__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    amount_msat: impl Wire2Api<u64> + UnwindSafe,
    node_id: impl Wire2Api<PublicKey> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_spontaneous_payment__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_amount_msat = amount_msat.wire2api();
            let api_node_id = node_id.wire2api();
            move |task_callback| {
                NodePointer::send_spontaneous_payment(&api_that, api_amount_msat, api_node_id)
            }
        },
    )
}
fn wire_receive_payment__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    amount_msat: impl Wire2Api<u64> + UnwindSafe,
    description: impl Wire2Api<String> + UnwindSafe,
    expiry_secs: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "receive_payment__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_amount_msat = amount_msat.wire2api();
            let api_description = description.wire2api();
            let api_expiry_secs = expiry_secs.wire2api();
            move |task_callback| {
                NodePointer::receive_payment(
                    &api_that,
                    api_amount_msat,
                    api_description,
                    api_expiry_secs,
                )
            }
        },
    )
}
fn wire_receive_variable_amount_payment__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    description: impl Wire2Api<String> + UnwindSafe,
    expiry_secs: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "receive_variable_amount_payment__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_description = description.wire2api();
            let api_expiry_secs = expiry_secs.wire2api();
            move |task_callback| {
                NodePointer::receive_variable_amount_payment(
                    &api_that,
                    api_description,
                    api_expiry_secs,
                )
            }
        },
    )
}
fn wire_payment__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    payment_hash: impl Wire2Api<PaymentHash> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "payment__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_payment_hash = payment_hash.wire2api();
            move |task_callback| Ok(NodePointer::payment(&api_that, api_payment_hash))
        },
    )
}
fn wire_remove_payment__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    payment_hash: impl Wire2Api<PaymentHash> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "remove_payment__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_payment_hash = payment_hash.wire2api();
            move |task_callback| NodePointer::remove_payment(&api_that, api_payment_hash)
        },
    )
}
fn wire_list_payments_with_filter__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    payment_direction: impl Wire2Api<PaymentDirection> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_payments_with_filter__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_payment_direction = payment_direction.wire2api();
            move |task_callback| {
                Ok(NodePointer::list_payments_with_filter(
                    &api_that,
                    api_payment_direction,
                ))
            }
        },
    )
}
fn wire_list_payments__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_payments__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(NodePointer::list_payments(&api_that))
        },
    )
}
fn wire_list_peers__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_peers__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(NodePointer::list_peers(&api_that))
        },
    )
}
fn wire_sign_message__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    msg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sign_message__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_msg = msg.wire2api();
            move |task_callback| NodePointer::sign_message(&api_that, api_msg)
        },
    )
}
fn wire_verify_signature__method__NodePointer_impl(
    port_: MessagePort,
    that: impl Wire2Api<NodePointer> + UnwindSafe,
    msg: impl Wire2Api<Vec<u8>> + UnwindSafe,
    sig: impl Wire2Api<String> + UnwindSafe,
    pkey: impl Wire2Api<PublicKey> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "verify_signature__method__NodePointer",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_msg = msg.wire2api();
            let api_sig = sig.wire2api();
            let api_pkey = pkey.wire2api();
            move |task_callback| {
                NodePointer::verify_signature(&api_that, api_msg, api_sig, api_pkey)
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<LogLevel> for i32 {
    fn wire2api(self) -> LogLevel {
        match self {
            0 => LogLevel::Gossip,
            1 => LogLevel::Trace,
            2 => LogLevel::Debug,
            3 => LogLevel::Info,
            4 => LogLevel::Warn,
            5 => LogLevel::Error,
            _ => unreachable!("Invalid variant for LogLevel: {}", self),
        }
    }
}

impl Wire2Api<Network> for i32 {
    fn wire2api(self) -> Network {
        match self {
            0 => Network::Bitcoin,
            1 => Network::Testnet,
            2 => Network::Signet,
            3 => Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}

impl Wire2Api<PaymentDirection> for i32 {
    fn wire2api(self) -> PaymentDirection {
        match self {
            0 => PaymentDirection::Inbound,
            1 => PaymentDirection::Outbound,
            _ => unreachable!("Invalid variant for PaymentDirection: {}", self),
        }
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Address {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Address {}

impl support::IntoDart for ChannelDetails {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.channel_id.into_dart(),
            self.counterparty_node_id.into_dart(),
            self.funding_txo.into_dart(),
            self.channel_value_sats.into_dart(),
            self.unspendable_punishment_reserve.into_dart(),
            self.user_channel_id.into_dart(),
            self.feerate_sat_per_1000_weight.into_dart(),
            self.balance_msat.into_dart(),
            self.outbound_capacity_msat.into_dart(),
            self.inbound_capacity_msat.into_dart(),
            self.confirmations_required.into_dart(),
            self.confirmations.into_dart(),
            self.is_outbound.into_dart(),
            self.is_channel_ready.into_dart(),
            self.is_usable.into_dart(),
            self.is_public.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ChannelDetails {}

impl support::IntoDart for ChannelId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ChannelId {}

impl support::IntoDart for Event {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::PaymentSuccessful { payment_hash } => {
                vec![0.into_dart(), payment_hash.into_dart()]
            }
            Self::PaymentFailed { payment_hash } => vec![1.into_dart(), payment_hash.into_dart()],
            Self::PaymentReceived {
                payment_hash,
                amount_msat,
            } => vec![
                2.into_dart(),
                payment_hash.into_dart(),
                amount_msat.into_dart(),
            ],
            Self::ChannelReady {
                channel_id,
                user_channel_id,
            } => vec![
                3.into_dart(),
                channel_id.into_dart(),
                user_channel_id.into_dart(),
            ],
            Self::ChannelClosed {
                channel_id,
                user_channel_id,
            } => vec![
                4.into_dart(),
                channel_id.into_dart(),
                user_channel_id.into_dart(),
            ],
            Self::ChannelPending {
                channel_id,
                user_channel_id,
                former_temporary_channel_id,
                counterparty_node_id,
                funding_txo,
            } => vec![
                5.into_dart(),
                channel_id.into_dart(),
                user_channel_id.into_dart(),
                former_temporary_channel_id.into_dart(),
                counterparty_node_id.into_dart(),
                funding_txo.into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Event {}

impl support::IntoDart for Invoice {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Invoice {}

impl support::IntoDart for Mnemonic {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Mnemonic {}

impl support::IntoDart for NetAddress {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::IPv4 { addr, port } => vec![0.into_dart(), addr.into_dart(), port.into_dart()],
            Self::IPv6 { addr, port } => vec![1.into_dart(), addr.into_dart(), port.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NetAddress {}
impl support::IntoDart for NodePointer {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NodePointer {}

impl support::IntoDart for OutPoint {
    fn into_dart(self) -> support::DartAbi {
        vec![self.txid.into_dart(), self.vout.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OutPoint {}

impl support::IntoDart for PaymentDetails {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.hash.into_dart(),
            self.preimage.into_dart(),
            self.secret.into_dart(),
            self.amount_msat.into_dart(),
            self.direction.into_dart(),
            self.status.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PaymentDetails {}

impl support::IntoDart for PaymentDirection {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Inbound => 0,
            Self::Outbound => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PaymentDirection {}
impl support::IntoDart for PaymentHash {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PaymentHash {}

impl support::IntoDart for PaymentPreimage {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PaymentPreimage {}

impl support::IntoDart for PaymentSecret {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PaymentSecret {}

impl support::IntoDart for PaymentStatus {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Pending => 0,
            Self::Succeeded => 1,
            Self::Failed => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PaymentStatus {}
impl support::IntoDart for PeerDetails {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.node_id.into_dart(),
            self.address.into_dart(),
            self.is_connected.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PeerDetails {}

impl support::IntoDart for PublicKey {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PublicKey {}

impl support::IntoDart for Txid {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Txid {}

impl support::IntoDart for UserChannelId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.internal.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UserChannelId {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
